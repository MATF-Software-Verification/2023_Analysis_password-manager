../password-manager-master/source/ui/android/android_impl.cpp:255:54: style:inconclusive: Function 'GetAssetData' argument 2 names different: declaration 'out_data' definition 'outData'. [funcArgNamesDifferent]
static int GetAssetData(const char* filename, void** outData)
                                                     ^
../password-manager-master/source/ui/android/android_impl.cpp:25:54: note: Function 'GetAssetData' argument 2 names different: declaration 'out_data' definition 'outData'.
static int GetAssetData(const char* filename, void** out_data);
                                                     ^
../password-manager-master/source/ui/android/android_impl.cpp:255:54: note: Function 'GetAssetData' argument 2 names different: declaration 'out_data' definition 'outData'.
static int GetAssetData(const char* filename, void** outData)
                                                     ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 26 configurations. Use --force to check all configurations. [toomanyconfigs]

^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3.cpp:290:10: warning: Either the condition 'bd!=NULL' is redundant or there is possible null pointer dereference: bd. [nullPointerRedundantCheck]
    if (!bd->ShaderHandle)
         ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3.cpp:288:18: note: Assuming that condition 'bd!=NULL' is not redundant
    IM_ASSERT(bd != NULL && "Did you call ImGui_ImplOpenGL3_Init()?");
                 ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3.cpp:287:66: note: Assignment 'bd=ImGui_ImplOpenGL3_GetBackendData()', assigned value is 0
    ImGui_ImplOpenGL3_Data* bd = ImGui_ImplOpenGL3_GetBackendData();
                                                                 ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3.cpp:290:10: note: Null pointer dereference
    if (!bd->ShaderHandle)
         ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3.cpp:189:41: style: C-style pointer casting [cstyleCast]
    return ImGui::GetCurrentContext() ? (ImGui_ImplOpenGL3_Data*)ImGui::GetIO().BackendRendererUserData : NULL;
                                        ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:172:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:173:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:174:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:175:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:176:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:177:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:178:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:179:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:180:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:181:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:182:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:183:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:184:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:185:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:186:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:209:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:210:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:211:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:212:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:223:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:234:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:235:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:248:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:249:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:250:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:251:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:252:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:275:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:276:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:277:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:278:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:279:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:280:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:281:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:282:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:283:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:284:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:285:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:286:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:287:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:288:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:289:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:290:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:291:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:292:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:293:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:294:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:295:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:327:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:328:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:329:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:330:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:331:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:332:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:349:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:350:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:358:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:364:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:365:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:368:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRY  *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:372:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint *param);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:373:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:386:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRY  *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:392:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:393:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:394:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:395:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:396:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void **param);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:399:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRY  *GLVULKANPROCNV)(void);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_opengl3_loader.h:405:0: information: Skipping configuration 'APIENTRY;_WIN32;__CYGWIN__;__SCITECH_SNAP__' since the value of 'APIENTRY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);
^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:292:9: warning: Either the condition 'bd!=NULL' is redundant or there is possible null pointer dereference: bd. [nullPointerRedundantCheck]
    if (bd->ClipboardTextData)
        ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:289:18: note: Assuming that condition 'bd!=NULL' is not redundant
    IM_ASSERT(bd != NULL && "No platform backend to shutdown, or already shutdown?");
                 ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:288:60: note: Assignment 'bd=ImGui_ImplSDL2_GetBackendData()', assigned value is 0
    ImGui_ImplSDL2_Data* bd = ImGui_ImplSDL2_GetBackendData();
                                                           ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:292:9: note: Null pointer dereference
    if (bd->ClipboardTextData)
        ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:430:23: warning: Either the condition 'bd!=NULL' is redundant or there is possible null pointer dereference: bd. [nullPointerRedundantCheck]
    SDL_GetWindowSize(bd->Window, &w, &h);
                      ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:424:18: note: Assuming that condition 'bd!=NULL' is not redundant
    IM_ASSERT(bd != NULL && "Did you call ImGui_ImplSDL2_Init()?");
                 ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:423:60: note: Assignment 'bd=ImGui_ImplSDL2_GetBackendData()', assigned value is 0
    ImGui_ImplSDL2_Data* bd = ImGui_ImplSDL2_GetBackendData();
                                                           ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:430:23: note: Null pointer dereference
    SDL_GetWindowSize(bd->Window, &w, &h);
                      ^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:90:41: style: C-style pointer casting [cstyleCast]
    return ImGui::GetCurrentContext() ? (ImGui_ImplSDL2_Data*)ImGui::GetIO().BackendPlatformUserData : NULL;
                                        ^
../password-manager-master/source/ui/imgui/imgui.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 64 configurations. Use --force to check all configurations. [toomanyconfigs]

^
../password-manager-master/source/ui/imgui/imgui.cpp:6824:5: warning: Assert statement calls a function which may have desired side effects: 'back'. [assertWithSideEffect]
    IM_ASSERT(item_flags == g.ItemFlagsStack.back());
    ^
../password-manager-master/source/ui/imgui/imgui.cpp:2394:5: error: Non-local variable 'TempData' will use pointer to local variable 'ClipperTempData'. [danglingLifetime]
    TempData = data;
    ^
../password-manager-master/source/ui/imgui/imgui.cpp:2391:34: note: Address of variable taken here.
    ImGuiListClipperData* data = &g.ClipperTempData[g.ClipperTempDataStacked - 1];
                                 ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1667:37: note: Variable created here.
    ImVector<ImGuiListClipperData>  ClipperTempData;
                                    ^
../password-manager-master/source/ui/imgui/imgui.cpp:2394:5: note: Non-local variable 'TempData' will use pointer to local variable 'ClipperTempData'.
    TempData = data;
    ^
../password-manager-master/source/ui/imgui/imgui.cpp:10722:12: error: Returning pointer to local variable 'DragDropPayload' that will be invalid when returning. [returnDanglingLifetime]
    return &payload;
           ^
../password-manager-master/source/ui/imgui/imgui.cpp:10692:27: note: Assigned to reference.
    ImGuiPayload& payload = g.DragDropPayload;
                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:10722:12: note: Address of variable taken here.
    return &payload;
           ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1653:29: note: Variable created here.
    ImGuiPayload            DragDropPayload;
                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:10722:12: note: Returning pointer to local variable 'DragDropPayload' that will be invalid when returning.
    return &payload;
           ^
../password-manager-master/source/ui/imgui/imgui.cpp:11091:20: error: Returning object that points to local variable 'SettingsHandlers' that will be invalid when returning. [returnDanglingLifetime]
            return &g.SettingsHandlers[handler_n];
                   ^
../password-manager-master/source/ui/imgui/imgui.cpp:11091:20: note: Address of variable taken here.
            return &g.SettingsHandlers[handler_n];
                   ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1716:41: note: Variable created here.
    ImVector<ImGuiSettingsHandler>      SettingsHandlers;       // List of .ini settings handlers
                                        ^
../password-manager-master/source/ui/imgui/imgui.cpp:11091:20: note: Returning object that points to local variable 'SettingsHandlers' that will be invalid when returning.
            return &g.SettingsHandlers[handler_n];
                   ^
../password-manager-master/source/ui/imgui/imgui.h:264:79: warning: The address of local variable 'x' might be accessed at non-zero index. [objectIndex]
    float  operator[] (size_t idx) const    { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.
                                                                              ^
../password-manager-master/source/ui/imgui/imgui.h:264:76: note: Address of variable taken here.
    float  operator[] (size_t idx) const    { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.
                                                                           ^
../password-manager-master/source/ui/imgui/imgui.h:264:79: note: The address of local variable 'x' might be accessed at non-zero index.
    float  operator[] (size_t idx) const    { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.
                                                                              ^
../password-manager-master/source/ui/imgui/imgui.h:265:79: warning: The address of local variable 'x' might be accessed at non-zero index. [objectIndex]
    float& operator[] (size_t idx)          { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.
                                                                              ^
../password-manager-master/source/ui/imgui/imgui.h:265:76: note: Address of variable taken here.
    float& operator[] (size_t idx)          { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.
                                                                           ^
../password-manager-master/source/ui/imgui/imgui.h:265:79: note: The address of local variable 'x' might be accessed at non-zero index.
    float& operator[] (size_t idx)          { IM_ASSERT(idx <= 1); return (&x)[idx]; }    // We very rarely use this [] operator, the assert overhead is fine.
                                                                              ^
../password-manager-master/source/ui/imgui/imgui.h:2214:76: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    inline ImGuiListClipper(int items_count, float items_height = -1.0f) { memset(this, 0, sizeof(*this)); ItemsCount = -1; Begin(items_count, items_height); } // [removed in 1.79]
                                                                           ^
../password-manager-master/source/ui/imgui/imgui.h:2300:19: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImDrawCmd() { memset(this, 0, sizeof(*this)); } // Also ensure our padding fields are zeroed
                  ^
../password-manager-master/source/ui/imgui/imgui.h:2417:59: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImDrawList(const ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shared_data; }
                                                          ^
../password-manager-master/source/ui/imgui/imgui.h:2534:23: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    void Clear()    { memset(this, 0, sizeof(*this)); }     // The ImDrawList are owned by ImGuiContext!
                      ^
../password-manager-master/source/ui/imgui/imgui.h:2818:27: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiViewport()     { memset(this, 0, sizeof(*this)); }
                          ^
../password-manager-master/source/ui/imgui/imgui_internal.h:978:31: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiComboPreviewData() { memset(this, 0, sizeof(*this)); }
                              ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1034:47: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }
                                              ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1063:27: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiPopupData()    { memset(this, 0, sizeof(*this)); OpenFrameCount = -1; }
                          ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1098:35: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }
                                  ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1117:35: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); }
                                  ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1131:31: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiLastItemData()     { memset(this, 0, sizeof(*this)); }
                              ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1199:39: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiListClipperData()          { memset(this, 0, sizeof(*this)); }
                                      ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1320:28: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiOldColumnData() { memset(this, 0, sizeof(*this)); }
                           ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1341:27: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiOldColumns()   { memset(this, 0, sizeof(*this)); }
                          ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2105:27: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiTabItem()      { memset(this, 0, sizeof(*this)); LastFrameVisible = LastFrameSelected = -1; NameOffset = -1; BeginOrder = IndexDuringLayout = -1; }
                          ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2214:9: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
        memset(this, 0, sizeof(*this));
        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2340:35: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiTable()                { memset(this, 0, sizeof(*this)); LastFrameActive = -1; }
                                  ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2364:35: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiTableTempData()        { memset(this, 0, sizeof(*this)); LastTimeActive = -1.0f; }
                                  ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2401:35: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiTableSettings()        { memset(this, 0, sizeof(*this)); }
                                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:1084:5: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    memset(this, 0, sizeof(*this));
    ^
../password-manager-master/source/ui/imgui/imgui.cpp:2361:5: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    memset(this, 0, sizeof(*this));
    ^
../password-manager-master/source/ui/imgui/imgui.cpp:3034:5: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    memset(this, 0, sizeof(*this));
    ^
../password-manager-master/source/ui/imgui/imgui.h:2249:71: performance: Variable 'Value' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    ImColor(const ImVec4& col)                                      { Value = col; }
                                                                      ^
../password-manager-master/source/ui/imgui/imgui.h:2607:110: performance: Variable 'GlyphOffset' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdvanceX = 0.0f; GlyphOffset = ImVec2(0, 0); Font = NULL; }
                                                                                                             ^
../password-manager-master/source/ui/imgui/imgui.cpp:1009:5: performance: Variable 'WindowPadding' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    WindowPadding           = ImVec2(8,8);      // Padding within a window
    ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < unsigned short >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiTextRange >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < char >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiStoragePair >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImDrawCmd >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImDrawChannel >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImDrawVert >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImVec4 >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < void * >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImVec2 >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < unsigned int >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImFont * >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImFontAtlasCustomRect >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImFontConfig >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < float >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImFontGlyph >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImDrawList * >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiListClipperRange >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiOldColumnData >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiStackLevelInfo >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiWindow * >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiWindowStackData >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiColorMod >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiStyleMod >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < int >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiGroupData >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiPopupData >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiViewportP * >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < unsigned char >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiListClipperData >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiTableTempData >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiPtrOrIndex >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiShrinkWidthItem >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiSettingsHandler >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiContextHook >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiOldColumns >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiTabItem >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiTableColumnSortSpecs >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImGuiStorage :: ImGuiStoragePair >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:2214:12: style: Struct 'ImGuiListClipper' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    inline ImGuiListClipper(int items_count, float items_height = -1.0f) { memset(this, 0, sizeof(*this)); ItemsCount = -1; Begin(items_count, items_height); } // [removed in 1.79]
           ^
../password-manager-master/source/ui/imgui/imgui.h:2247:5: style: Struct 'ImColor' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    ImColor(ImU32 rgba)                                             { float sc = 1.0f / 255.0f; Value.x = (float)((rgba >> IM_COL32_R_SHIFT) & 0xFF) * sc; Value.y = (float)((rgba >> IM_COL32_G_SHIFT) & 0xFF) * sc; Value.z = (float)((rgba >> IM_COL32_B_SHIFT) & 0xFF) * sc; Value.w = (float)((rgba >> IM_COL32_A_SHIFT) & 0xFF) * sc; }
    ^
../password-manager-master/source/ui/imgui/imgui.h:2249:5: style: Struct 'ImColor' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    ImColor(const ImVec4& col)                                      { Value = col; }
    ^
../password-manager-master/source/ui/imgui/imgui.h:2417:5: style: Struct 'ImDrawList' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    ImDrawList(const ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shared_data; }
    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:473:5: style: Struct 'ImVec1' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    ImVec1(float _x) { x = _x; }
    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:494:5: style: Struct 'ImRect' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)      {}
    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1170:5: style: Struct 'ImGuiPtrOrIndex' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    ImGuiPtrOrIndex(void* ptr)  { Ptr = ptr; Index = -1; }
    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1171:5: style: Struct 'ImGuiPtrOrIndex' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    ImGuiPtrOrIndex(int index)  { Ptr = NULL; Index = index; }
    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:1751:5: style: Struct 'ImGuiContext' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    ImGuiContext(ImFontAtlas* shared_font_atlas)
    ^
../password-manager-master/source/ui/imgui/imgui.cpp:9278:17: style: Condition '!is_tabbing' is always true [knownConditionTrueFalse]
            if (!is_tabbing)
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:9270:13: note: Assuming that condition 'is_tabbing' is not redundant
        if (is_tabbing)
            ^
../password-manager-master/source/ui/imgui/imgui.cpp:9278:17: note: Condition '!is_tabbing' is always true
            if (!is_tabbing)
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:6537:82: warning: Either the condition 'if(parent_window&&(parent_window->Collapsed||parent_window->HiddenFramesCanSkipItems>0))' is redundant or there is possible null pointer dereference: parent_window. [nullPointerRedundantCheck]
    window->DC.NavFocusScopeIdCurrent = (flags & ImGuiWindowFlags_ChildWindow) ? parent_window->DC.NavFocusScopeIdCurrent : window->GetID("#FOCUSSCOPE"); // Inherit from parent only // -V595
                                                                                 ^
../password-manager-master/source/ui/imgui/imgui.cpp:6563:16: note: Assuming that condition 'if(parent_window&&(parent_window->Collapsed||parent_window->HiddenFramesCanSkipItems>0))' is not redundant
            if (parent_window && (parent_window->Collapsed || parent_window->HiddenFramesCanSkipItems > 0))
               ^
../password-manager-master/source/ui/imgui/imgui.cpp:6537:82: note: Null pointer dereference
    window->DC.NavFocusScopeIdCurrent = (flags & ImGuiWindowFlags_ChildWindow) ? parent_window->DC.NavFocusScopeIdCurrent : window->GetID("#FOCUSSCOPE"); // Inherit from parent only // -V595
                                                                                 ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2402:66: style: C-style pointer casting [cstyleCast]
    ImGuiTableColumnSettings*   GetColumnSettings()     { return (ImGuiTableColumnSettings*)(this + 1); }
                                                                 ^
../password-manager-master/source/ui/imgui/imgui.cpp:1956:19: style: C-style pointer casting [cstyleCast]
            if (((const ImGuiStoragePair*)lhs)->key > ((const ImGuiStoragePair*)rhs)->key) return +1;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:1957:19: style: C-style pointer casting [cstyleCast]
            if (((const ImGuiStoragePair*)lhs)->key < ((const ImGuiStoragePair*)rhs)->key) return -1;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2354:34: style: C-style pointer casting [cstyleCast]
    ImGuiListClipperData* data = (ImGuiListClipperData*)clipper->TempData;
                                 ^
../password-manager-master/source/ui/imgui/imgui.cpp:2406:38: style: C-style pointer casting [cstyleCast]
    if (ImGuiListClipperData* data = (ImGuiListClipperData*)TempData)
                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:2421:34: style: C-style pointer casting [cstyleCast]
    ImGuiListClipperData* data = (ImGuiListClipperData*)TempData;
                                 ^
../password-manager-master/source/ui/imgui/imgui.cpp:2432:34: style: C-style pointer casting [cstyleCast]
    ImGuiListClipperData* data = (ImGuiListClipperData*)TempData;
                                 ^
../password-manager-master/source/ui/imgui/imgui.cpp:2693:24: style: C-style pointer casting [cstyleCast]
        ImVec2* pvar = (ImVec2*)var_info->GetVarPtr(&g.Style);
                       ^
../password-manager-master/source/ui/imgui/imgui.cpp:3594:32: style: C-style pointer casting [cstyleCast]
    return GetViewportDrawList((ImGuiViewportP*)viewport, 0, "##Background");
                               ^
../password-manager-master/source/ui/imgui/imgui.cpp:3605:32: style: C-style pointer casting [cstyleCast]
    return GetViewportDrawList((ImGuiViewportP*)viewport, 1, "##Foreground");
                               ^
../password-manager-master/source/ui/imgui/imgui.cpp:4455:32: style: C-style pointer casting [cstyleCast]
    ImGuiViewportP* viewport = (ImGuiViewportP*)GetMainViewport();
                               ^
../password-manager-master/source/ui/imgui/imgui.cpp:5273:12: style: C-style pointer casting [cstyleCast]
    return (ImGuiWindow*)g.WindowsById.GetVoidPtr(id);
           ^
../password-manager-master/source/ui/imgui/imgui.cpp:6257:36: style: C-style pointer casting [cstyleCast]
        ImGuiViewportP* viewport = (ImGuiViewportP*)(void*)GetMainViewport();
                                   ^
../password-manager-master/source/ui/imgui/imgui.cpp:8974:24: style: C-style pointer casting [cstyleCast]
    ImRect r_screen = ((ImGuiViewportP*)(void*)GetMainViewport())->GetMainRect();
                       ^
../password-manager-master/source/ui/imgui/imgui.cpp:11238:37: style: C-style pointer casting [cstyleCast]
    ImGuiWindowSettings* settings = (ImGuiWindowSettings*)entry;
                                    ^
../password-manager-master/source/ui/imgui/imgui.h:1738:115: style: C-style pointer casting [cstyleCast]
    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }
                                                                                                                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5819:11: style: Same expression used in consecutive assignments of 'pad_l' and 'pad_r'. [duplicateAssignExpression]
    float pad_l = style.FramePadding.x;
          ^
../password-manager-master/source/ui/imgui/imgui.cpp:5820:11: note: Same expression used in consecutive assignments of 'pad_l' and 'pad_r'.
    float pad_r = style.FramePadding.x;
          ^
../password-manager-master/source/ui/imgui/imgui.cpp:5819:11: note: Same expression used in consecutive assignments of 'pad_l' and 'pad_r'.
    float pad_l = style.FramePadding.x;
          ^
../password-manager-master/source/ui/imgui/imgui.cpp:5419:17: style: The scope of the variable 'style' can be reduced. [variableScope]
    ImGuiStyle& style = g.Style;
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:7834:19: style: The scope of the variable 'g' can be reduced. [variableScope]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:11041:19: style: The scope of the variable 'g' can be reduced. [variableScope]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:11618:17: style: The scope of the variable 'wrt_rects_names' can be reduced. [variableScope]
    const char* wrt_rects_names[WRT_Count] = { "OuterRect", "OuterRectClipped", "InnerRect", "InnerClipRect", "WorkRect", "Content", "ContentIdeal", "ContentRegionRect" };
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:11620:17: style: The scope of the variable 'trt_rects_names' can be reduced. [variableScope]
    const char* trt_rects_names[TRT_Count] = { "OuterRect", "InnerRect", "WorkRect", "HostClipRect", "InnerClipRect", "BackgroundClipRect", "ColumnsRect", "ColumnsWorkRect", "ColumnsClipRect", "ColumnsContentHeadersUsed", "ColumnsContentHeadersIdeal", "ColumnsContentFrozen", "ColumnsContentUnfrozen" };
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:1184:50: style:inconclusive: Function 'AddInputCharactersUTF8' argument 1 names different: declaration 'str' definition 'utf8_chars'. [funcArgNamesDifferent]
void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)
                                                 ^
../password-manager-master/source/ui/imgui/imgui.h:1897:56: note: Function 'AddInputCharactersUTF8' argument 1 names different: declaration 'str' definition 'utf8_chars'.
    IMGUI_API void  AddInputCharactersUTF8(const char* str);    // Queue new characters input from an UTF-8 string
                                                       ^
../password-manager-master/source/ui/imgui/imgui.cpp:1184:50: note: Function 'AddInputCharactersUTF8' argument 1 names different: declaration 'str' definition 'utf8_chars'.
void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)
                                                 ^
../password-manager-master/source/ui/imgui/imgui.cpp:1373:62: style:inconclusive: Function 'ImStrdupcpy' argument 3 names different: declaration 'str' definition 'src'. [funcArgNamesDifferent]
char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)
                                                             ^
../password-manager-master/source/ui/imgui/imgui_internal.h:322:80: note: Function 'ImStrdupcpy' argument 3 names different: declaration 'str' definition 'src'.
IMGUI_API char*         ImStrdupcpy(char* dst, size_t* p_dst_size, const char* str);
                                                                               ^
../password-manager-master/source/ui/imgui/imgui.cpp:1373:62: note: Function 'ImStrdupcpy' argument 3 names different: declaration 'str' definition 'src'.
char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)
                                                             ^
../password-manager-master/source/ui/imgui/imgui.cpp:1387:39: style:inconclusive: Function 'ImStrchrRange' argument 1 names different: declaration 'str_begin' definition 'str'. [funcArgNamesDifferent]
const char* ImStrchrRange(const char* str, const char* str_end, char c)
                                      ^
../password-manager-master/source/ui/imgui/imgui_internal.h:323:51: note: Function 'ImStrchrRange' argument 1 names different: declaration 'str_begin' definition 'str'.
IMGUI_API const char*   ImStrchrRange(const char* str_begin, const char* str_end, char c);
                                                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:1387:39: note: Function 'ImStrchrRange' argument 1 names different: declaration 'str_begin' definition 'str'.
const char* ImStrchrRange(const char* str, const char* str_end, char c)
                                      ^
../password-manager-master/source/ui/imgui/imgui.cpp:1438:28: style:inconclusive: Function 'ImStrTrimBlanks' argument 1 names different: declaration 'str' definition 'buf'. [funcArgNamesDifferent]
void ImStrTrimBlanks(char* buf)
                           ^
../password-manager-master/source/ui/imgui/imgui_internal.h:328:47: note: Function 'ImStrTrimBlanks' argument 1 names different: declaration 'str' definition 'buf'.
IMGUI_API void          ImStrTrimBlanks(char* str);
                                              ^
../password-manager-master/source/ui/imgui/imgui.cpp:1438:28: note: Function 'ImStrTrimBlanks' argument 1 names different: declaration 'str' definition 'buf'.
void ImStrTrimBlanks(char* buf)
                           ^
../password-manager-master/source/ui/imgui/imgui.cpp:1538:32: style:inconclusive: Function 'ImHashData' argument 1 names different: declaration 'data' definition 'data_p'. [funcArgNamesDifferent]
ImGuiID ImHashData(const void* data_p, size_t data_size, ImU32 seed)
                               ^
../password-manager-master/source/ui/imgui/imgui_internal.h:298:48: note: Function 'ImHashData' argument 1 names different: declaration 'data' definition 'data_p'.
IMGUI_API ImGuiID       ImHashData(const void* data, size_t data_size, ImU32 seed = 0);
                                               ^
../password-manager-master/source/ui/imgui/imgui.cpp:1538:32: note: Function 'ImHashData' argument 1 names different: declaration 'data' definition 'data_p'.
ImGuiID ImHashData(const void* data_p, size_t data_size, ImU32 seed)
                               ^
../password-manager-master/source/ui/imgui/imgui.cpp:1554:31: style:inconclusive: Function 'ImHashStr' argument 1 names different: declaration 'data' definition 'data_p'. [funcArgNamesDifferent]
ImGuiID ImHashStr(const char* data_p, size_t data_size, ImU32 seed)
                              ^
../password-manager-master/source/ui/imgui/imgui_internal.h:299:47: note: Function 'ImHashStr' argument 1 names different: declaration 'data' definition 'data_p'.
IMGUI_API ImGuiID       ImHashStr(const char* data, size_t data_size = 0, ImU32 seed = 0);
                                              ^
../password-manager-master/source/ui/imgui/imgui.cpp:1554:31: note: Function 'ImHashStr' argument 1 names different: declaration 'data' definition 'data_p'.
ImGuiID ImHashStr(const char* data_p, size_t data_size, ImU32 seed)
                              ^
../password-manager-master/source/ui/imgui/imgui.cpp:1607:34: style:inconclusive: Function 'ImFileClose' argument 1 names different: declaration 'file' definition 'f'. [funcArgNamesDifferent]
bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }
                                 ^
../password-manager-master/source/ui/imgui/imgui_internal.h:384:54: note: Function 'ImFileClose' argument 1 names different: declaration 'file' definition 'f'.
IMGUI_API bool              ImFileClose(ImFileHandle file);
                                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:1607:34: note: Function 'ImFileClose' argument 1 names different: declaration 'file' definition 'f'.
bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }
                                 ^
../password-manager-master/source/ui/imgui/imgui.cpp:1608:36: style:inconclusive: Function 'ImFileGetSize' argument 1 names different: declaration 'file' definition 'f'. [funcArgNamesDifferent]
ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 && !fseek(f, 0, SEEK_END) && (sz = ftell(f)) != -1 && !fseek(f, off, SEEK_SET)) ? (ImU64)sz : (ImU64)-1; }
                                   ^
../password-manager-master/source/ui/imgui/imgui_internal.h:385:56: note: Function 'ImFileGetSize' argument 1 names different: declaration 'file' definition 'f'.
IMGUI_API ImU64             ImFileGetSize(ImFileHandle file);
                                                       ^
../password-manager-master/source/ui/imgui/imgui.cpp:1608:36: note: Function 'ImFileGetSize' argument 1 names different: declaration 'file' definition 'f'.
ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 && !fseek(f, 0, SEEK_END) && (sz = ftell(f)) != -1 && !fseek(f, off, SEEK_SET)) ? (ImU64)sz : (ImU64)-1; }
                                   ^
../password-manager-master/source/ui/imgui/imgui.cpp:1609:38: style:inconclusive: Function 'ImFileRead' argument 2 names different: declaration 'size' definition 'sz'. [funcArgNamesDifferent]
ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(data, (size_t)sz, (size_t)count, f); }
                                     ^
../password-manager-master/source/ui/imgui/imgui_internal.h:386:58: note: Function 'ImFileRead' argument 2 names different: declaration 'size' definition 'sz'.
IMGUI_API ImU64             ImFileRead(void* data, ImU64 size, ImU64 count, ImFileHandle file);
                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:1609:38: note: Function 'ImFileRead' argument 2 names different: declaration 'size' definition 'sz'.
ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(data, (size_t)sz, (size_t)count, f); }
                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:1609:68: style:inconclusive: Function 'ImFileRead' argument 4 names different: declaration 'file' definition 'f'. [funcArgNamesDifferent]
ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(data, (size_t)sz, (size_t)count, f); }
                                                                   ^
../password-manager-master/source/ui/imgui/imgui_internal.h:386:90: note: Function 'ImFileRead' argument 4 names different: declaration 'file' definition 'f'.
IMGUI_API ImU64             ImFileRead(void* data, ImU64 size, ImU64 count, ImFileHandle file);
                                                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:1609:68: note: Function 'ImFileRead' argument 4 names different: declaration 'file' definition 'f'.
ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(data, (size_t)sz, (size_t)count, f); }
                                                                   ^
../password-manager-master/source/ui/imgui/imgui.cpp:1610:45: style:inconclusive: Function 'ImFileWrite' argument 2 names different: declaration 'size' definition 'sz'. [funcArgNamesDifferent]
ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(data, (size_t)sz, (size_t)count, f); }
                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:387:65: note: Function 'ImFileWrite' argument 2 names different: declaration 'size' definition 'sz'.
IMGUI_API ImU64             ImFileWrite(const void* data, ImU64 size, ImU64 count, ImFileHandle file);
                                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:1610:45: note: Function 'ImFileWrite' argument 2 names different: declaration 'size' definition 'sz'.
ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(data, (size_t)sz, (size_t)count, f); }
                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:1610:75: style:inconclusive: Function 'ImFileWrite' argument 4 names different: declaration 'file' definition 'f'. [funcArgNamesDifferent]
ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(data, (size_t)sz, (size_t)count, f); }
                                                                          ^
../password-manager-master/source/ui/imgui/imgui_internal.h:387:97: note: Function 'ImFileWrite' argument 4 names different: declaration 'file' definition 'f'.
IMGUI_API ImU64             ImFileWrite(const void* data, ImU64 size, ImU64 count, ImFileHandle file);
                                                                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:1610:75: note: Function 'ImFileWrite' argument 4 names different: declaration 'file' definition 'f'.
ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(data, (size_t)sz, (size_t)count, f); }
                                                                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:1714:32: style:inconclusive: Function 'ImTextStrFromUtf8' argument 1 names different: declaration 'out_buf' definition 'buf'. [funcArgNamesDifferent]
int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
                               ^
../password-manager-master/source/ui/imgui/imgui_internal.h:343:52: note: Function 'ImTextStrFromUtf8' argument 1 names different: declaration 'out_buf' definition 'buf'.
IMGUI_API int           ImTextStrFromUtf8(ImWchar* out_buf, int out_buf_size, const char* in_text, const char* in_text_end, const char** in_remaining = NULL);   // return input UTF-8 bytes count
                                                   ^
../password-manager-master/source/ui/imgui/imgui.cpp:1714:32: note: Function 'ImTextStrFromUtf8' argument 1 names different: declaration 'out_buf' definition 'buf'.
int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
                               ^
../password-manager-master/source/ui/imgui/imgui.cpp:1714:41: style:inconclusive: Function 'ImTextStrFromUtf8' argument 2 names different: declaration 'out_buf_size' definition 'buf_size'. [funcArgNamesDifferent]
int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:343:65: note: Function 'ImTextStrFromUtf8' argument 2 names different: declaration 'out_buf_size' definition 'buf_size'.
IMGUI_API int           ImTextStrFromUtf8(ImWchar* out_buf, int out_buf_size, const char* in_text, const char* in_text_end, const char** in_remaining = NULL);   // return input UTF-8 bytes count
                                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:1714:41: note: Function 'ImTextStrFromUtf8' argument 2 names different: declaration 'out_buf_size' definition 'buf_size'.
int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
                                        ^
../password-manager-master/source/ui/imgui/imgui.cpp:1714:110: style:inconclusive: Function 'ImTextStrFromUtf8' argument 5 names different: declaration 'in_remaining' definition 'in_text_remaining'. [funcArgNamesDifferent]
int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
                                                                                                             ^
../password-manager-master/source/ui/imgui/imgui_internal.h:343:138: note: Function 'ImTextStrFromUtf8' argument 5 names different: declaration 'in_remaining' definition 'in_text_remaining'.
IMGUI_API int           ImTextStrFromUtf8(ImWchar* out_buf, int out_buf_size, const char* in_text, const char* in_text_end, const char** in_remaining = NULL);   // return input UTF-8 bytes count
                                                                                                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:1714:110: note: Function 'ImTextStrFromUtf8' argument 5 names different: declaration 'in_remaining' definition 'in_text_remaining'.
int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
                                                                                                             ^
../password-manager-master/source/ui/imgui/imgui.cpp:2062:34: style:inconclusive: Function 'SetAllInt' argument 1 names different: declaration 'val' definition 'v'. [funcArgNamesDifferent]
void ImGuiStorage::SetAllInt(int v)
                                 ^
../password-manager-master/source/ui/imgui/imgui.h:2167:39: note: Function 'SetAllInt' argument 1 names different: declaration 'val' definition 'v'.
    IMGUI_API void      SetAllInt(int val);
                                      ^
../password-manager-master/source/ui/imgui/imgui.cpp:2062:34: note: Function 'SetAllInt' argument 1 names different: declaration 'val' definition 'v'.
void ImGuiStorage::SetAllInt(int v)
                                 ^
../password-manager-master/source/ui/imgui/imgui.cpp:2845:132: style:inconclusive: Function 'RenderTextClippedEx' argument 5 names different: declaration 'text_end' definition 'text_display_end'. [funcArgNamesDifferent]
void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_display_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)
                                                                                                                                   ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2690:148: note: Function 'RenderTextClippedEx' argument 5 names different: declaration 'text_end' definition 'text_display_end'.
    IMGUI_API void          RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align = ImVec2(0, 0), const ImRect* clip_rect = NULL);
                                                                                                                                                   ^
../password-manager-master/source/ui/imgui/imgui.cpp:2845:132: note: Function 'RenderTextClippedEx' argument 5 names different: declaration 'text_end' definition 'text_display_end'.
void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_display_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)
                                                                                                                                   ^
../password-manager-master/source/ui/imgui/imgui.cpp:2892:171: style:inconclusive: Function 'RenderTextEllipsis' argument 7 names different: declaration 'text_end' definition 'text_end_full'. [funcArgNamesDifferent]
void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, float clip_max_x, float ellipsis_max_x, const char* text, const char* text_end_full, const ImVec2* text_size_if_known)
                                                                                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2691:187: note: Function 'RenderTextEllipsis' argument 7 names different: declaration 'text_end' definition 'text_end_full'.
    IMGUI_API void          RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, float clip_max_x, float ellipsis_max_x, const char* text, const char* text_end, const ImVec2* text_size_if_known);
                                                                                                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:2892:171: note: Function 'RenderTextEllipsis' argument 7 names different: declaration 'text_end' definition 'text_end_full'.
void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_max, float clip_max_x, float ellipsis_max_x, const char* text, const char* text_end_full, const ImVec2* text_size_if_known)
                                                                                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:3396:92: style:inconclusive: Function 'SetLastItemData' argument 3 names different: declaration 'status_flags' definition 'item_flags'. [funcArgNamesDifferent]
void ImGui::SetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags item_flags, const ImRect& item_rect)
                                                                                           ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2512:108: note: Function 'SetLastItemData' argument 3 names different: declaration 'status_flags' definition 'item_flags'.
    IMGUI_API void          SetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, const ImRect& item_rect);
                                                                                                           ^
../password-manager-master/source/ui/imgui/imgui.cpp:3396:92: note: Function 'SetLastItemData' argument 3 names different: declaration 'status_flags' definition 'item_flags'.
void ImGui::SetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags item_flags, const ImRect& item_rect)
                                                                                           ^
../password-manager-master/source/ui/imgui/imgui.cpp:3515:45: style:inconclusive: Function 'AddContextHook' argument 1 names different: declaration 'context' definition 'ctx'. [funcArgNamesDifferent]
ImGuiID ImGui::AddContextHook(ImGuiContext* ctx, const ImGuiContextHook* hook)
                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2462:58: note: Function 'AddContextHook' argument 1 names different: declaration 'context' definition 'ctx'.
    IMGUI_API ImGuiID       AddContextHook(ImGuiContext* context, const ImGuiContextHook* hook);
                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:3515:45: note: Function 'AddContextHook' argument 1 names different: declaration 'context' definition 'ctx'.
ImGuiID ImGui::AddContextHook(ImGuiContext* ctx, const ImGuiContextHook* hook)
                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:3525:45: style:inconclusive: Function 'RemoveContextHook' argument 1 names different: declaration 'context' definition 'ctx'. [funcArgNamesDifferent]
void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)
                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2463:61: note: Function 'RemoveContextHook' argument 1 names different: declaration 'context' definition 'ctx'.
    IMGUI_API void          RemoveContextHook(ImGuiContext* context, ImGuiID hook_to_remove);
                                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:3525:45: note: Function 'RemoveContextHook' argument 1 names different: declaration 'context' definition 'ctx'.
void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)
                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:3525:58: style:inconclusive: Function 'RemoveContextHook' argument 2 names different: declaration 'hook_to_remove' definition 'hook_id'. [funcArgNamesDifferent]
void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)
                                                         ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2463:78: note: Function 'RemoveContextHook' argument 2 names different: declaration 'hook_to_remove' definition 'hook_id'.
    IMGUI_API void          RemoveContextHook(ImGuiContext* context, ImGuiID hook_to_remove);
                                                                             ^
../password-manager-master/source/ui/imgui/imgui.cpp:3525:58: note: Function 'RemoveContextHook' argument 2 names different: declaration 'hook_to_remove' definition 'hook_id'.
void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)
                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:3536:44: style:inconclusive: Function 'CallContextHooks' argument 1 names different: declaration 'context' definition 'ctx'. [funcArgNamesDifferent]
void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)
                                           ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2464:60: note: Function 'CallContextHooks' argument 1 names different: declaration 'context' definition 'ctx'.
    IMGUI_API void          CallContextHooks(ImGuiContext* context, ImGuiContextHookType type);
                                                           ^
../password-manager-master/source/ui/imgui/imgui.cpp:3536:44: note: Function 'CallContextHooks' argument 1 names different: declaration 'context' definition 'ctx'.
void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)
                                           ^
../password-manager-master/source/ui/imgui/imgui.cpp:3536:70: style:inconclusive: Function 'CallContextHooks' argument 2 names different: declaration 'type' definition 'hook_type'. [funcArgNamesDifferent]
void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)
                                                                     ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2464:90: note: Function 'CallContextHooks' argument 2 names different: declaration 'type' definition 'hook_type'.
    IMGUI_API void          CallContextHooks(ImGuiContext* context, ImGuiContextHookType type);
                                                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:3536:70: note: Function 'CallContextHooks' argument 2 names different: declaration 'type' definition 'hook_type'.
void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)
                                                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:4475:78: style:inconclusive: Function 'FindBottomMostVisibleWindowWithinBeginStack' argument 1 names different: declaration 'window' definition 'parent_window'. [funcArgNamesDifferent]
ImGuiWindow* ImGui::FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* parent_window)
                                                                             ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2442:86: note: Function 'FindBottomMostVisibleWindowWithinBeginStack' argument 1 names different: declaration 'window' definition 'parent_window'.
    IMGUI_API ImGuiWindow*  FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* window);
                                                                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:4475:78: note: Function 'FindBottomMostVisibleWindowWithinBeginStack' argument 1 names different: declaration 'window' definition 'parent_window'.
ImGuiWindow* ImGui::FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* parent_window)
                                                                             ^
../password-manager-master/source/ui/imgui/imgui.cpp:4819:73: style:inconclusive: Function 'GetKeyPressedAmount' argument 3 names different: declaration 'rate' definition 'repeat_rate'. [funcArgNamesDifferent]
int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float repeat_rate)
                                                                        ^
../password-manager-master/source/ui/imgui/imgui.h:891:90: note: Function 'GetKeyPressedAmount' argument 3 names different: declaration 'rate' definition 'repeat_rate'.
    IMGUI_API int           GetKeyPressedAmount(int key_index, float repeat_delay, float rate); // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate
                                                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:4819:73: note: Function 'GetKeyPressedAmount' argument 3 names different: declaration 'rate' definition 'repeat_rate'.
int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float repeat_rate)
                                                                        ^
../password-manager-master/source/ui/imgui/imgui.cpp:4986:41: style:inconclusive: Function 'CaptureKeyboardFromApp' argument 1 names different: declaration 'want_capture_keyboard_value' definition 'capture'. [funcArgNamesDifferent]
void ImGui::CaptureKeyboardFromApp(bool capture)
                                        ^
../password-manager-master/source/ui/imgui/imgui.h:892:57: note: Function 'CaptureKeyboardFromApp' argument 1 names different: declaration 'want_capture_keyboard_value' definition 'capture'.
    IMGUI_API void          CaptureKeyboardFromApp(bool want_capture_keyboard_value = true);    // attention: misleading name! manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application to handle). e.g. force capture keyboard when your widget is being hovered. This is equivalent to setting "io.WantCaptureKeyboard = want_capture_keyboard_value"; after the next NewFrame() call.
                                                        ^
../password-manager-master/source/ui/imgui/imgui.cpp:4986:41: note: Function 'CaptureKeyboardFromApp' argument 1 names different: declaration 'want_capture_keyboard_value' definition 'capture'.
void ImGui::CaptureKeyboardFromApp(bool capture)
                                        ^
../password-manager-master/source/ui/imgui/imgui.cpp:4991:38: style:inconclusive: Function 'CaptureMouseFromApp' argument 1 names different: declaration 'want_capture_mouse_value' definition 'capture'. [funcArgNamesDifferent]
void ImGui::CaptureMouseFromApp(bool capture)
                                     ^
../password-manager-master/source/ui/imgui/imgui.h:913:54: note: Function 'CaptureMouseFromApp' argument 1 names different: declaration 'want_capture_mouse_value' definition 'capture'.
    IMGUI_API void          CaptureMouseFromApp(bool want_capture_mouse_value = true);          // attention: misleading name! manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application to handle). This is equivalent to setting "io.WantCaptureMouse = want_capture_mouse_value;" after the next NewFrame() call.
                                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:4991:38: note: Function 'CaptureMouseFromApp' argument 1 names different: declaration 'want_capture_mouse_value' definition 'capture'.
void ImGui::CaptureMouseFromApp(bool capture)
                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:5244:78: style:inconclusive: Function 'BeginChildFrame' argument 3 names different: declaration 'flags' definition 'extra_flags'. [funcArgNamesDifferent]
bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)
                                                                             ^
../password-manager-master/source/ui/imgui/imgui.h:872:94: note: Function 'BeginChildFrame' argument 3 names different: declaration 'flags' definition 'extra_flags'.
    IMGUI_API bool          BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags flags = 0); // helper to create a child window / scrolling region that looks like a normal widget frame
                                                                                             ^
../password-manager-master/source/ui/imgui/imgui.cpp:5244:78: note: Function 'BeginChildFrame' argument 3 names different: declaration 'flags' definition 'extra_flags'.
bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)
                                                                             ^
../password-manager-master/source/ui/imgui/imgui.cpp:6682:74: style:inconclusive: Function 'BringWindowToDisplayBehind' argument 2 names different: declaration 'above_window' definition 'behind_window'. [funcArgNamesDifferent]
void ImGui::BringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* behind_window)
                                                                         ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2440:90: note: Function 'BringWindowToDisplayBehind' argument 2 names different: declaration 'above_window' definition 'behind_window'.
    IMGUI_API void          BringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* above_window);
                                                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:6682:74: note: Function 'BringWindowToDisplayBehind' argument 2 names different: declaration 'above_window' definition 'behind_window'.
void ImGui::BringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* behind_window)
                                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:6896:35: style:inconclusive: Function 'PushTextWrapPos' argument 1 names different: declaration 'wrap_local_pos_x' definition 'wrap_pos_x'. [funcArgNamesDifferent]
void ImGui::PushTextWrapPos(float wrap_pos_x)
                                  ^
../password-manager-master/source/ui/imgui/imgui.h:420:51: note: Function 'PushTextWrapPos' argument 1 names different: declaration 'wrap_local_pos_x' definition 'wrap_pos_x'.
    IMGUI_API void          PushTextWrapPos(float wrap_local_pos_x = 0.0f);                 // push word-wrapping position for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space
                                                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:6896:35: note: Function 'PushTextWrapPos' argument 1 names different: declaration 'wrap_local_pos_x' definition 'wrap_pos_x'.
void ImGui::PushTextWrapPos(float wrap_pos_x)
                                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7213:131: style:inconclusive: Function 'SetNextWindowSizeConstraints' argument 4 names different: declaration 'custom_callback_data' definition 'custom_callback_user_data'. [funcArgNamesDifferent]
void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback, void* custom_callback_user_data)
                                                                                                                                  ^
../password-manager-master/source/ui/imgui/imgui.h:366:154: note: Function 'SetNextWindowSizeConstraints' argument 4 names different: declaration 'custom_callback_data' definition 'custom_callback_user_data'.
    IMGUI_API void          SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback = NULL, void* custom_callback_data = NULL); // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Sizes will be rounded down. Use callback to apply non-trivial programmatic constraints.
                                                                                                                                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:7213:131: note: Function 'SetNextWindowSizeConstraints' argument 4 names different: declaration 'custom_callback_data' definition 'custom_callback_user_data'.
void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeCallback custom_callback, void* custom_callback_user_data)
                                                                                                                                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7352:43: style:inconclusive: Function 'SetStateStorage' argument 1 names different: declaration 'storage' definition 'tree'. [funcArgNamesDifferent]
void ImGui::SetStateStorage(ImGuiStorage* tree)
                                          ^
../password-manager-master/source/ui/imgui/imgui.h:870:59: note: Function 'SetStateStorage' argument 1 names different: declaration 'storage' definition 'tree'.
    IMGUI_API void          SetStateStorage(ImGuiStorage* storage);                             // replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)
                                                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:7352:43: note: Function 'SetStateStorage' argument 1 names different: declaration 'storage' definition 'tree'.
void ImGui::SetStateStorage(ImGuiStorage* tree)
                                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:7409:42: style:inconclusive: Function 'GetIDWithSeed' argument 1 names different: declaration 'str_id_begin' definition 'str'. [funcArgNamesDifferent]
ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)
                                         ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2504:55: note: Function 'GetIDWithSeed' argument 1 names different: declaration 'str_id_begin' definition 'str'.
    IMGUI_API ImGuiID       GetIDWithSeed(const char* str_id_begin, const char* str_id_end, ImGuiID seed);
                                                      ^
../password-manager-master/source/ui/imgui/imgui.cpp:7409:42: note: Function 'GetIDWithSeed' argument 1 names different: declaration 'str_id_begin' definition 'str'.
ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)
                                         ^
../password-manager-master/source/ui/imgui/imgui.cpp:7409:59: style:inconclusive: Function 'GetIDWithSeed' argument 2 names different: declaration 'str_id_end' definition 'str_end'. [funcArgNamesDifferent]
ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)
                                                          ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2504:81: note: Function 'GetIDWithSeed' argument 2 names different: declaration 'str_id_end' definition 'str_end'.
    IMGUI_API ImGuiID       GetIDWithSeed(const char* str_id_begin, const char* str_id_end, ImGuiID seed);
                                                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:7409:59: note: Function 'GetIDWithSeed' argument 2 names different: declaration 'str_id_end' definition 'str_end'.
ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)
                                                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:7466:56: style:inconclusive: Function 'DebugCheckVersionAndDataLayout' argument 1 names different: declaration 'version_str' definition 'version'. [funcArgNamesDifferent]
bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_vert, size_t sz_idx)
                                                       ^
../password-manager-master/source/ui/imgui/imgui.h:931:72: note: Function 'DebugCheckVersionAndDataLayout' argument 1 names different: declaration 'version_str' definition 'version'.
    IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.
                                                                       ^
../password-manager-master/source/ui/imgui/imgui.cpp:7466:56: note: Function 'DebugCheckVersionAndDataLayout' argument 1 names different: declaration 'version_str' definition 'version'.
bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_vert, size_t sz_idx)
                                                       ^
../password-manager-master/source/ui/imgui/imgui.cpp:7466:135: style:inconclusive: Function 'DebugCheckVersionAndDataLayout' argument 6 names different: declaration 'sz_drawvert' definition 'sz_vert'. [funcArgNamesDifferent]
bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_vert, size_t sz_idx)
                                                                                                                                      ^
../password-manager-master/source/ui/imgui/imgui.h:931:155: note: Function 'DebugCheckVersionAndDataLayout' argument 6 names different: declaration 'sz_drawvert' definition 'sz_vert'.
    IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.
                                                                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:7466:135: note: Function 'DebugCheckVersionAndDataLayout' argument 6 names different: declaration 'sz_drawvert' definition 'sz_vert'.
bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_vert, size_t sz_idx)
                                                                                                                                      ^
../password-manager-master/source/ui/imgui/imgui.cpp:7466:151: style:inconclusive: Function 'DebugCheckVersionAndDataLayout' argument 7 names different: declaration 'sz_drawidx' definition 'sz_idx'. [funcArgNamesDifferent]
bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_vert, size_t sz_idx)
                                                                                                                                                      ^
../password-manager-master/source/ui/imgui/imgui.h:931:175: note: Function 'DebugCheckVersionAndDataLayout' argument 7 names different: declaration 'sz_drawidx' definition 'sz_idx'.
    IMGUI_API bool          DebugCheckVersionAndDataLayout(const char* version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx); // This is called by IMGUI_CHECKVERSION() macro.
                                                                                                                                                                              ^
../password-manager-master/source/ui/imgui/imgui.cpp:7466:151: note: Function 'DebugCheckVersionAndDataLayout' argument 7 names different: declaration 'sz_drawidx' definition 'sz_idx'.
bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_vert, size_t sz_idx)
                                                                                                                                                      ^
../password-manager-master/source/ui/imgui/imgui.cpp:7759:65: style:inconclusive: Function 'ItemAdd' argument 3 names different: declaration 'nav_bb' definition 'nav_bb_arg'. [funcArgNamesDifferent]
bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg, ImGuiItemFlags extra_flags)
                                                                ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2509:81: note: Function 'ItemAdd' argument 3 names different: declaration 'nav_bb' definition 'nav_bb_arg'.
    IMGUI_API bool          ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb = NULL, ImGuiItemFlags extra_flags = 0);
                                                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:7759:65: note: Function 'ItemAdd' argument 3 names different: declaration 'nav_bb' definition 'nav_bb_arg'.
bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg, ImGuiItemFlags extra_flags)
                                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:7828:55: style:inconclusive: Function 'SameLine' argument 2 names different: declaration 'spacing' definition 'spacing_w'. [funcArgNamesDifferent]
void ImGui::SameLine(float offset_from_start_x, float spacing_w)
                                                      ^
../password-manager-master/source/ui/imgui/imgui.h:441:76: note: Function 'SameLine' argument 2 names different: declaration 'spacing' definition 'spacing_w'.
    IMGUI_API void          SameLine(float offset_from_start_x=0.0f, float spacing=-1.0f);  // call between widgets or groups to layout them horizontally. X position given in window coordinates.
                                                                           ^
../password-manager-master/source/ui/imgui/imgui.cpp:7828:55: note: Function 'SameLine' argument 2 names different: declaration 'spacing' definition 'spacing_w'.
void ImGui::SameLine(float offset_from_start_x, float spacing_w)
                                                      ^
../password-manager-master/source/ui/imgui/imgui.cpp:7891:33: style:inconclusive: Function 'SetCursorPosX' argument 1 names different: declaration 'local_x' definition 'x'. [funcArgNamesDifferent]
void ImGui::SetCursorPosX(float x)
                                ^
../password-manager-master/source/ui/imgui/imgui.h:453:49: note: Function 'SetCursorPosX' argument 1 names different: declaration 'local_x' definition 'x'.
    IMGUI_API void          SetCursorPosX(float local_x);                                   //    GetWindowPos() + GetCursorPos() == GetCursorScreenPos() etc.)
                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:7891:33: note: Function 'SetCursorPosX' argument 1 names different: declaration 'local_x' definition 'x'.
void ImGui::SetCursorPosX(float x)
                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:7898:33: style:inconclusive: Function 'SetCursorPosY' argument 1 names different: declaration 'local_y' definition 'y'. [funcArgNamesDifferent]
void ImGui::SetCursorPosY(float y)
                                ^
../password-manager-master/source/ui/imgui/imgui.h:454:49: note: Function 'SetCursorPosY' argument 1 names different: declaration 'local_y' definition 'y'.
    IMGUI_API void          SetCursorPosY(float local_y);                                   //
                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:7898:33: note: Function 'SetCursorPosY' argument 1 names different: declaration 'local_y' definition 'y'.
void ImGui::SetCursorPosY(float y)
                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:7945:56: style:inconclusive: Function 'PushMultiItemsWidths' argument 2 names different: declaration 'width_full' definition 'w_full'. [funcArgNamesDifferent]
void ImGui::PushMultiItemsWidths(int components, float w_full)
                                                       ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2515:72: note: Function 'PushMultiItemsWidths' argument 2 names different: declaration 'width_full' definition 'w_full'.
    IMGUI_API void          PushMultiItemsWidths(int components, float width_full);
                                                                       ^
../password-manager-master/source/ui/imgui/imgui.cpp:7945:56: note: Function 'PushMultiItemsWidths' argument 2 names different: declaration 'width_full' definition 'w_full'.
void ImGui::PushMultiItemsWidths(int components, float w_full)
                                                       ^
../password-manager-master/source/ui/imgui/imgui.cpp:8233:61: style:inconclusive: Function 'ScrollToRect' argument 2 names different: declaration 'rect' definition 'item_rect'. [funcArgNamesDifferent]
void ImGui::ScrollToRect(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)
                                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2484:77: note: Function 'ScrollToRect' argument 2 names different: declaration 'rect' definition 'item_rect'.
    IMGUI_API void          ScrollToRect(ImGuiWindow* window, const ImRect& rect, ImGuiScrollFlags flags = 0);
                                                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:8233:61: note: Function 'ScrollToRect' argument 2 names different: declaration 'rect' definition 'item_rect'.
void ImGui::ScrollToRect(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)
                                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:8239:65: style:inconclusive: Function 'ScrollToRectEx' argument 2 names different: declaration 'rect' definition 'item_rect'. [funcArgNamesDifferent]
ImVec2 ImGui::ScrollToRectEx(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)
                                                                ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2485:79: note: Function 'ScrollToRectEx' argument 2 names different: declaration 'rect' definition 'item_rect'.
    IMGUI_API ImVec2        ScrollToRectEx(ImGuiWindow* window, const ImRect& rect, ImGuiScrollFlags flags = 0);
                                                                              ^
../password-manager-master/source/ui/imgui/imgui.cpp:8239:65: note: Function 'ScrollToRectEx' argument 2 names different: declaration 'rect' definition 'item_rect'.
ImVec2 ImGui::ScrollToRectEx(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)
                                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:8518:61: style:inconclusive: Function 'IsPopupOpen' argument 2 names different: declaration 'flags' definition 'popup_flags'. [funcArgNamesDifferent]
bool ImGui::IsPopupOpen(const char* str_id, ImGuiPopupFlags popup_flags)
                                                            ^
../password-manager-master/source/ui/imgui/imgui.h:711:77: note: Function 'IsPopupOpen' argument 2 names different: declaration 'flags' definition 'popup_flags'.
    IMGUI_API bool          IsPopupOpen(const char* str_id, ImGuiPopupFlags flags = 0);                         // return true if the popup is open.
                                                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:8518:61: note: Function 'IsPopupOpen' argument 2 names different: declaration 'flags' definition 'popup_flags'.
bool ImGui::IsPopupOpen(const char* str_id, ImGuiPopupFlags popup_flags)
                                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:8729:55: style:inconclusive: Function 'BeginPopupEx' argument 2 names different: declaration 'extra_flags' definition 'flags'. [funcArgNamesDifferent]
bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags flags)
                                                      ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2548:71: note: Function 'BeginPopupEx' argument 2 names different: declaration 'extra_flags' definition 'flags'.
    IMGUI_API bool          BeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_flags);
                                                                      ^
../password-manager-master/source/ui/imgui/imgui.cpp:8729:55: note: Function 'BeginPopupEx' argument 2 names different: declaration 'extra_flags' definition 'flags'.
bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags flags)
                                                      ^
../password-manager-master/source/ui/imgui/imgui.cpp:9411:78: style:inconclusive: Function 'NavMoveRequestTryWrapping' argument 2 names different: declaration 'move_flags' definition 'wrap_flags'. [funcArgNamesDifferent]
void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags wrap_flags)
                                                                             ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2575:94: note: Function 'NavMoveRequestTryWrapping' argument 2 names different: declaration 'move_flags' definition 'wrap_flags'.
    IMGUI_API void          NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags);
                                                                                             ^
../password-manager-master/source/ui/imgui/imgui.cpp:9411:78: note: Function 'NavMoveRequestTryWrapping' argument 2 names different: declaration 'move_flags' definition 'wrap_flags'.
void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags wrap_flags)
                                                                             ^
../password-manager-master/source/ui/imgui/imgui.cpp:10585:75: style:inconclusive: Function 'SetDragDropPayload' argument 3 names different: declaration 'sz' definition 'data_size'. [funcArgNamesDifferent]
bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond cond)
                                                                          ^
../password-manager-master/source/ui/imgui/imgui.h:810:91: note: Function 'SetDragDropPayload' argument 3 names different: declaration 'sz' definition 'data_size'.
    IMGUI_API bool          SetDragDropPayload(const char* type, const void* data, size_t sz, ImGuiCond cond = 0);  // type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.
                                                                                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:10585:75: note: Function 'SetDragDropPayload' argument 3 names different: declaration 'sz' definition 'data_size'.
bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond cond)
                                                                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:11202:52: style:inconclusive: Function 'SaveIniSettingsToMemory' argument 1 names different: declaration 'out_ini_size' definition 'out_size'. [funcArgNamesDifferent]
const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)
                                                   ^
../password-manager-master/source/ui/imgui/imgui.h:927:61: note: Function 'SaveIniSettingsToMemory' argument 1 names different: declaration 'out_ini_size' definition 'out_size'.
    IMGUI_API const char*   SaveIniSettingsToMemory(size_t* out_ini_size = NULL);               // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.
                                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:11202:52: note: Function 'SaveIniSettingsToMemory' argument 1 names different: declaration 'out_ini_size' definition 'out_size'.
const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)
                                                   ^
../password-manager-master/source/ui/imgui/imgui.h:2589:134: style: Argument 'size_in_bytes/(int)sizeof(unsigned int)' to function resize is always 2048 [constArgument]
    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }
                                                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui.h:2589:98: note: Assignment 'size_in_bytes=(65535+1)/8', assigned value is 8192
    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }
                                                                                                 ^
../password-manager-master/source/ui/imgui/imgui.h:2589:134: note: Argument 'size_in_bytes/(int)sizeof(unsigned int)' to function resize is always 2048
    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }
                                                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:7475:54: style: Argument 'sz_idx==sizeof(unsigned short)&&"Mismatched struct layout!"' to function assert is always 0 [constArgument]
    if (sz_idx != sizeof(ImDrawIdx)) { error = true; IM_ASSERT(sz_idx == sizeof(ImDrawIdx) && "Mismatched struct layout!"); }
                                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:7475:16: note: Assuming that condition 'sz_idx!=sizeof(unsigned short)' is not redundant
    if (sz_idx != sizeof(ImDrawIdx)) { error = true; IM_ASSERT(sz_idx == sizeof(ImDrawIdx) && "Mismatched struct layout!"); }
               ^
../password-manager-master/source/ui/imgui/imgui.cpp:7475:54: note: Argument 'sz_idx==sizeof(unsigned short)&&"Mismatched struct layout!"' to function assert is always 0
    if (sz_idx != sizeof(ImDrawIdx)) { error = true; IM_ASSERT(sz_idx == sizeof(ImDrawIdx) && "Mismatched struct layout!"); }
                                                     ^
../password-manager-master/source/ui/imgui/imgui.cpp:2440:27: warning: Found suspicious operator ',' [constStatement]
        return (void)End(), false;
                          ^
../password-manager-master/source/ui/imgui/imgui.cpp:2449:31: warning: Found suspicious operator ',' [constStatement]
            return (void)End(), false;
                              ^
../password-manager-master/source/ui/imgui/imgui.cpp:2466:35: warning: Found suspicious operator ',' [constStatement]
                return (void)End(), false;
                                  ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2063:57: style: Variable 'g' can be declared with const [constVariable]
    float       CalcFontSize() const    { ImGuiContext& g = *GImGui; float scale = g.FontBaseSize * FontWindowScale; if (ParentWindow) scale *= ParentWindow->FontWindowScale; return scale; }
                                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2064:57: style: Variable 'g' can be declared with const [constVariable]
    float       TitleBarHeight() const  { ImGuiContext& g = *GImGui; return (Flags & ImGuiWindowFlags_NoTitleBar) ? 0.0f : CalcFontSize() + g.Style.FramePadding.y * 2.0f; }
                                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2066:57: style: Variable 'g' can be declared with const [constVariable]
    float       MenuBarHeight() const   { ImGuiContext& g = *GImGui; return (Flags & ImGuiWindowFlags_MenuBar) ? DC.MenuBarOffset.y + CalcFontSize() + g.Style.FramePadding.y * 2.0f : 0.0f; }
                                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2417:73: style: Variable 'g' can be declared with const [constVariable]
    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.CurrentWindow; }
                                                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2446:62: style: Variable 'g' can be declared with const [constVariable]
    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefault ? g.IO.FontDefault : g.IO.Fonts->Fonts[0]; }
                                                             ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2491:61: style: Variable 'g' can be declared with const [constVariable]
    inline ImGuiID          GetItemID()     { ImGuiContext& g = *GImGui; return g.LastItemData.ID; }   // Get ID of last item (~~ often same ImGui::GetID(label) beforehand)
                                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2492:69: style: Variable 'g' can be declared with const [constVariable]
    inline ImGuiItemStatusFlags GetItemStatusFlags(){ ImGuiContext& g = *GImGui; return g.LastItemData.StatusFlags; }
                                                                    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2493:61: style: Variable 'g' can be declared with const [constVariable]
    inline ImGuiItemFlags   GetItemFlags()  { ImGuiContext& g = *GImGui; return g.LastItemData.InFlags; }
                                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2494:61: style: Variable 'g' can be declared with const [constVariable]
    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }
                                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2495:61: style: Variable 'g' can be declared with const [constVariable]
    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }
                                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2587:77: style: Variable 'g' can be declared with const [constVariable]
    inline ImGuiID          GetFocusedFocusScope()          { ImGuiContext& g = *GImGui; return g.NavFocusScopeId; }                            // Focus scope which is actually active
                                                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2588:77: style: Variable 'g' can be declared with const [constVariable]
    inline ImGuiID          GetFocusScope()                 { ImGuiContext& g = *GImGui; return g.CurrentWindow->DC.NavFocusScopeIdCurrent; }   // Focus scope we are outputting into, set by PushFocusScope()
                                                                            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2594:105: style: Variable 'g' can be declared with const [constVariable]
    inline bool             IsActiveIdUsingNavDir(ImGuiDir dir)                         { ImGuiContext& g = *GImGui; return (g.ActiveIdUsingNavDirMask & (1 << dir)) != 0; }
                                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2595:105: style: Variable 'g' can be declared with const [constVariable]
    inline bool             IsActiveIdUsingNavInput(ImGuiNavInput input)                { ImGuiContext& g = *GImGui; return (g.ActiveIdUsingNavInputMask & (1 << input)) != 0; }
                                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2596:105: style: Variable 'g' can be declared with const [constVariable]
    inline bool             IsActiveIdUsingKey(ImGuiKey key)                            { ImGuiContext& g = *GImGui; IM_ASSERT(key < 64); return (g.ActiveIdUsingKeyInputMask & ((ImU64)1 << key)) != 0; }
                                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2598:105: style: Variable 'g' can be declared with const [constVariable]
    inline bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true)           { ImGuiContext& g = *GImGui; const int key_index = g.IO.KeyMap[key]; return (key_index >= 0) ? IsKeyPressed(key_index, repeat) : false; }
                                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2599:105: style: Variable 'g' can be declared with const [constVariable]
    inline bool             IsNavInputDown(ImGuiNavInput n)                             { ImGuiContext& g = *GImGui; return g.IO.NavInputs[n] > 0.0f; }
                                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2630:63: style: Variable 'g' can be declared with const [constVariable]
    inline    ImGuiTable*   GetCurrentTable() { ImGuiContext& g = *GImGui; return g.CurrentTable; }
                                                              ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2761:81: style: Variable 'g' can be declared with const [constVariable]
    inline bool             TempInputIsActive(ImGuiID id)       { ImGuiContext& g = *GImGui; return (g.ActiveId == id && g.TempInputId == id); }
                                                                                ^
../password-manager-master/source/ui/imgui/imgui.cpp:1926:93: style: Parameter 'data' can be declared with const [constParameter]
static ImGuiStorage::ImGuiStoragePair* LowerBound(ImVector<ImGuiStorage::ImGuiStoragePair>& data, ImGuiID key)
                                                                                            ^
../password-manager-master/source/ui/imgui/imgui.cpp:2249:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2259:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2330:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2430:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2566:17: style: Variable 'style' can be declared with const [constVariable]
    ImGuiStyle& style = GImGui->Style;
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:2574:17: style: Variable 'style' can be declared with const [constVariable]
    ImGuiStyle& style = GImGui->Style;
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:2588:17: style: Variable 'style' can be declared with const [constVariable]
    ImGuiStyle& style = GImGui->Style;
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:2803:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2829:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2881:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2894:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2972:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2985:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:2997:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3067:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3078:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3089:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3099:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3109:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3119:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3230:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3260:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3280:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3385:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3410:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3553:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3599:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:3978:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:4414:14: style: Variable 'io' can be declared with const [constVariable]
    ImGuiIO& io = ImGui::GetIO();
             ^
../password-manager-master/source/ui/imgui/imgui.cpp:4477:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:4494:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:4684:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:4769:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:4786:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:4919:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:4926:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:4998:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5006:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5015:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5023:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5030:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5045:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5051:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5057:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5063:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5069:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5081:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5119:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5125:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5246:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5418:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5419:17: style: Variable 'style' can be declared with const [constVariable]
    ImGuiStyle& style = g.Style;
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:5685:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5694:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:5721:17: style: Variable 'style' can be declared with const [constVariable]
    ImGuiStyle& style = g.Style;
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:5805:17: style: Variable 'style' can be declared with const [constVariable]
    ImGuiStyle& style = g.Style;
                ^
../password-manager-master/source/ui/imgui/imgui.cpp:5918:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:6756:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:6954:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:6975:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7007:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7049:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7366:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7374:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7382:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7390:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7399:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7413:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7517:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7559:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7646:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7662:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7720:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7834:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7913:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7921:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:7971:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8014:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8020:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8026:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8032:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8041:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8052:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8228:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8241:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8344:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8350:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8384:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8390:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8489:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8529:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8539:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8613:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8657:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8700:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8821:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8850:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8864:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8878:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8972:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:8982:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:9228:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:9353:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:9533:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:9768:14: style: Variable 'io' can be declared with const [constVariable]
    ImGuiIO& io = g.IO;
             ^
../password-manager-master/source/ui/imgui/imgui.cpp:10036:14: style: Variable 'io' can be declared with const [constVariable]
    ImGuiIO& io = g.IO;
             ^
../password-manager-master/source/ui/imgui/imgui.cpp:10111:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:10127:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:10182:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:10192:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:10684:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:10909:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:10917:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:11307:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:11314:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:11526:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.cpp:11596:14: style: Variable 'io' can be declared with const [constVariable]
    ImGuiIO& io = g.IO;
             ^
../password-manager-master/source/ui/imgui/imgui.cpp:12326:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui.h:1748:43: style: Parameter 'v' can be declared with const [constParameter]
    inline bool         contains(const T& v) const          { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data++ == v) return true; return false; }
                                          ^
../password-manager-master/source/ui/imgui/imgui.h:1749:39: style: Parameter 'v' can be declared with const [constParameter]
    inline T*           find(const T& v)                    { T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data == v) break; else ++data; return data; }
                                      ^
../password-manager-master/source/ui/imgui/imgui.h:1750:39: style: Parameter 'v' can be declared with const [constParameter]
    inline const T*     find(const T& v) const              { const T* data = Data;  const T* data_end = Data + Size; while (data < data_end) if (*data == v) break; else ++data; return data; }
                                      ^
../password-manager-master/source/ui/imgui/imgui.cpp:6259:34: style: Variable 'viewport_work_rect' is assigned a value that is never used. [unreadVariable]
        ImRect viewport_work_rect(viewport->GetWorkRect());
                                 ^
../password-manager-master/source/ui/imgui/imgui.cpp:12271:7: style: Variable 'p' is assigned a value that is never used. [unreadVariable]
    p += ImFormatString(p, buf_end - p, (tab_bar->Tabs.Size > 3) ? " ... }" : " } ");
      ^
../password-manager-master/source/ui/imgui/imgui.cpp:2216:5: error: va_list 'args_copy' used before va_start() was called. [va_list_usedBeforeStarted]
    va_copy(args_copy, args);
    ^
../password-manager-master/source/ui/imgui/imgui.cpp:2221:9: error: va_list 'args_copy' used before va_start() was called. [va_list_usedBeforeStarted]
        va_end(args_copy);
        ^
../password-manager-master/source/ui/imgui/imgui.cpp:10978:9: style: Condition 'log_to_tty' is always false [knownConditionTrueFalse]
    if (log_to_tty)
        ^
../password-manager-master/source/ui/imgui/imgui.cpp:10871:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 50 configurations. Use --force to check all configurations. [toomanyconfigs]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:756:41: warning: Obsolete function 'alloca' called. [allocaCalled]
        ImVec2* temp_normals = (ImVec2*)alloca(points_count * ((use_texture || !thick_line) ? 3 : 5) * sizeof(ImVec2)); //-V630
                                        ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1003:41: warning: Obsolete function 'alloca' called. [allocaCalled]
        ImVec2* temp_normals = (ImVec2*)alloca(points_count * sizeof(ImVec2)); //-V630
                                        ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:377:5: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    memset(this, 0, sizeof(*this));
    ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:414:5: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    memset(&_CmdHeader, 0, sizeof(_CmdHeader));
    ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1912:5: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    memset(this, 0, sizeof(*this));
    ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1977:5: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    memset(this, 0, sizeof(*this));
    ^
../password-manager-master/source/ui/imgui/imgui.h:2536:21: style:inconclusive: Technically the member function 'ImDrawData::ScaleClipRects' can be const. [functionConst]
    IMGUI_API void  ScaleClipRects(const ImVec2& fb_scale); // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.
                    ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1840:18: note: Technically the member function 'ImDrawData::ScaleClipRects' can be const.
void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)
                 ^
../password-manager-master/source/ui/imgui/imgui.h:2536:21: note: Technically the member function 'ImDrawData::ScaleClipRects' can be const.
    IMGUI_API void  ScaleClipRects(const ImVec2& fb_scale); // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than Dear ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.
                    ^
../password-manager-master/source/ui/imgui/imgui.h:2595:21: style:inconclusive: Technically the member function 'ImFontGlyphRangesBuilder::BuildRanges' can be const. [functionConst]
    IMGUI_API void  BuildRanges(ImVector<ImWchar>* out_ranges);                 // Output new ranges
                    ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3087:32: note: Technically the member function 'ImFontGlyphRangesBuilder::BuildRanges' can be const.
void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)
                               ^
../password-manager-master/source/ui/imgui/imgui.h:2595:21: note: Technically the member function 'ImFontGlyphRangesBuilder::BuildRanges' can be const.
    IMGUI_API void  BuildRanges(ImVector<ImWchar>* out_ranges);                 // Output new ranges
                    ^
../password-manager-master/source/ui/imgui/imgui.h:2670:33: performance:inconclusive: Technically the member function 'ImFontAtlas::GetGlyphRangesDefault' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    IMGUI_API const ImWchar*    GetGlyphRangesDefault();                // Basic Latin, Extended Latin
                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2810:31: note: Technically the member function 'ImFontAtlas::GetGlyphRangesDefault' can be static (but you may consider moving to unnamed namespace).
const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()
                              ^
../password-manager-master/source/ui/imgui/imgui.h:2670:33: note: Technically the member function 'ImFontAtlas::GetGlyphRangesDefault' can be static (but you may consider moving to unnamed namespace).
    IMGUI_API const ImWchar*    GetGlyphRangesDefault();                // Basic Latin, Extended Latin
                                ^
../password-manager-master/source/ui/imgui/imgui.h:2671:33: performance:inconclusive: Technically the member function 'ImFontAtlas::GetGlyphRangesKorean' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    IMGUI_API const ImWchar*    GetGlyphRangesKorean();                 // Default + Korean characters
                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2820:30: note: Technically the member function 'ImFontAtlas::GetGlyphRangesKorean' can be static (but you may consider moving to unnamed namespace).
const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()
                             ^
../password-manager-master/source/ui/imgui/imgui.h:2671:33: note: Technically the member function 'ImFontAtlas::GetGlyphRangesKorean' can be static (but you may consider moving to unnamed namespace).
    IMGUI_API const ImWchar*    GetGlyphRangesKorean();                 // Default + Korean characters
                                ^
../password-manager-master/source/ui/imgui/imgui.h:2672:33: performance:inconclusive: Technically the member function 'ImFontAtlas::GetGlyphRangesJapanese' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    IMGUI_API const ImWchar*    GetGlyphRangesJapanese();               // Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs
                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2931:30: note: Technically the member function 'ImFontAtlas::GetGlyphRangesJapanese' can be static (but you may consider moving to unnamed namespace).
const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()
                             ^
../password-manager-master/source/ui/imgui/imgui.h:2672:33: note: Technically the member function 'ImFontAtlas::GetGlyphRangesJapanese' can be static (but you may consider moving to unnamed namespace).
    IMGUI_API const ImWchar*    GetGlyphRangesJapanese();               // Default + Hiragana, Katakana, Half-Width, Selection of 2999 Ideographs
                                ^
../password-manager-master/source/ui/imgui/imgui.h:2673:33: performance:inconclusive: Technically the member function 'ImFontAtlas::GetGlyphRangesChineseFull' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    IMGUI_API const ImWchar*    GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2833:30: note: Technically the member function 'ImFontAtlas::GetGlyphRangesChineseFull' can be static (but you may consider moving to unnamed namespace).
const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()
                             ^
../password-manager-master/source/ui/imgui/imgui.h:2673:33: note: Technically the member function 'ImFontAtlas::GetGlyphRangesChineseFull' can be static (but you may consider moving to unnamed namespace).
    IMGUI_API const ImWchar*    GetGlyphRangesChineseFull();            // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs
                                ^
../password-manager-master/source/ui/imgui/imgui.h:2674:33: performance:inconclusive: Technically the member function 'ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    IMGUI_API const ImWchar*    GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2863:30: note: Technically the member function 'ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon' can be static (but you may consider moving to unnamed namespace).
const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()
                             ^
../password-manager-master/source/ui/imgui/imgui.h:2674:33: note: Technically the member function 'ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon' can be static (but you may consider moving to unnamed namespace).
    IMGUI_API const ImWchar*    GetGlyphRangesChineseSimplifiedCommon();// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese
                                ^
../password-manager-master/source/ui/imgui/imgui.h:2675:33: performance:inconclusive: Technically the member function 'ImFontAtlas::GetGlyphRangesCyrillic' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    IMGUI_API const ImWchar*    GetGlyphRangesCyrillic();               // Default + about 400 Cyrillic characters
                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3021:30: note: Technically the member function 'ImFontAtlas::GetGlyphRangesCyrillic' can be static (but you may consider moving to unnamed namespace).
const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()
                             ^
../password-manager-master/source/ui/imgui/imgui.h:2675:33: note: Technically the member function 'ImFontAtlas::GetGlyphRangesCyrillic' can be static (but you may consider moving to unnamed namespace).
    IMGUI_API const ImWchar*    GetGlyphRangesCyrillic();               // Default + about 400 Cyrillic characters
                                ^
../password-manager-master/source/ui/imgui/imgui.h:2676:33: performance:inconclusive: Technically the member function 'ImFontAtlas::GetGlyphRangesThai' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    IMGUI_API const ImWchar*    GetGlyphRangesThai();                   // Default + Thai characters
                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3034:30: note: Technically the member function 'ImFontAtlas::GetGlyphRangesThai' can be static (but you may consider moving to unnamed namespace).
const ImWchar*  ImFontAtlas::GetGlyphRangesThai()
                             ^
../password-manager-master/source/ui/imgui/imgui.h:2676:33: note: Technically the member function 'ImFontAtlas::GetGlyphRangesThai' can be static (but you may consider moving to unnamed namespace).
    IMGUI_API const ImWchar*    GetGlyphRangesThai();                   // Default + Thai characters
                                ^
../password-manager-master/source/ui/imgui/imgui.h:2677:33: performance:inconclusive: Technically the member function 'ImFontAtlas::GetGlyphRangesVietnamese' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    IMGUI_API const ImWchar*    GetGlyphRangesVietnamese();             // Default + Vietnamese characters
                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3046:30: note: Technically the member function 'ImFontAtlas::GetGlyphRangesVietnamese' can be static (but you may consider moving to unnamed namespace).
const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()
                             ^
../password-manager-master/source/ui/imgui/imgui.h:2677:33: note: Technically the member function 'ImFontAtlas::GetGlyphRangesVietnamese' can be static (but you may consider moving to unnamed namespace).
    IMGUI_API const ImWchar*    GetGlyphRangesVietnamese();             // Default + Vietnamese characters
                                ^
../password-manager-master/source/ui/imgui/imgui.h:2786:33: style:inconclusive: Technically the member function 'ImFont::SetGlyphVisible' can be const. [functionConst]
    IMGUI_API void              SetGlyphVisible(ImWchar c, bool visible);
                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3235:14: note: Technically the member function 'ImFont::SetGlyphVisible' can be const.
void ImFont::SetGlyphVisible(ImWchar c, bool visible)
             ^
../password-manager-master/source/ui/imgui/imgui.h:2786:33: note: Technically the member function 'ImFont::SetGlyphVisible' can be const.
    IMGUI_API void              SetGlyphVisible(ImWchar c, bool visible);
                                ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImFontBuildSrcData >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < ImFontBuildDstData >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < stbrp_rect >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imgui.h:1719:25: performance:inconclusive: Technically the member function 'ImVector < stbtt_packedchar >::max_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    inline int          max_size() const                    { return 0x7FFFFFFF / (int)sizeof(T); }
                        ^
../password-manager-master/source/ui/imgui/imstb_rectpack.h:535:27: style: C-style pointer casting [cstyleCast]
   const stbrp_rect *p = (const stbrp_rect *) a;
                          ^
../password-manager-master/source/ui/imgui/imstb_rectpack.h:536:27: style: C-style pointer casting [cstyleCast]
   const stbrp_rect *q = (const stbrp_rect *) b;
                          ^
../password-manager-master/source/ui/imgui/imstb_rectpack.h:547:27: style: C-style pointer casting [cstyleCast]
   const stbrp_rect *p = (const stbrp_rect *) a;
                          ^
../password-manager-master/source/ui/imgui/imstb_rectpack.h:548:27: style: C-style pointer casting [cstyleCast]
   const stbrp_rect *q = (const stbrp_rect *) b;
                          ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:4129:21: style: C-style pointer casting [cstyleCast]
   stbrp_pack_rects((stbrp_context *) spc->pack_info, rects, num_rects);
                    ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:756:32: style: C-style pointer casting [cstyleCast]
        ImVec2* temp_normals = (ImVec2*)alloca(points_count * ((use_texture || !thick_line) ? 3 : 5) * sizeof(ImVec2)); //-V630
                               ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1003:32: style: C-style pointer casting [cstyleCast]
        ImVec2* temp_normals = (ImVec2*)alloca(points_count * sizeof(ImVec2)); //-V630
                               ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2510:26: style: C-style pointer casting [cstyleCast]
        stbrp_pack_rects((stbrp_context*)spc.pack_info, src_tmp.Rects, src_tmp.GlyphsCount);
                         ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2622:35: style: C-style pointer casting [cstyleCast]
    stbrp_context* pack_context = (stbrp_context*)stbrp_context_opaque;
                                  ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3237:30: style: C-style pointer casting [cstyleCast]
    if (ImFontGlyph* glyph = (ImFontGlyph*)(void*)FindGlyph((ImWchar)c))
                             ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:3069:53: style: Same expression on both sides of '-'. [duplicateExpression]
               scanline[x2] += area + sign * (1-((x2-x2)+(x_bottom-x2))/2) * (sy1-y_crossing);
                                                    ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:1175:22: style: The scope of the variable 'offsize' can be reduced. [variableScope]
   int count, start, offsize;
                     ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:1200:8: style: The scope of the variable 'v' can be reduced. [variableScope]
   int v, b0 = stbtt__buf_peek8(b);
       ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:1642:17: style: The scope of the variable 'endPtsOfContours' can be reduced. [variableScope]
   stbtt_uint8 *endPtsOfContours;
                ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:1785:34: style: The scope of the variable 'i' can be reduced. [variableScope]
         int comp_num_verts = 0, i;
                                 ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2288:25: style: The scope of the variable 'straw' can be reduced. [variableScope]
   stbtt_uint32 needle, straw;
                        ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2289:14: style: The scope of the variable 'm' can be reduced. [variableScope]
   int l, r, m;
             ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2323:46: style: The scope of the variable 'm' can be reduced. [variableScope]
            stbtt_int32 l=0, r=glyphCount-1, m;
                                             ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2324:17: style: The scope of the variable 'straw' can be reduced. [variableScope]
            int straw, needle=glyph;
                ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2346:46: style: The scope of the variable 'm' can be reduced. [variableScope]
            stbtt_int32 l=0, r=rangeCount-1, m;
                                             ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2347:17: style: The scope of the variable 'strawStart' can be reduced. [variableScope]
            int strawStart, strawEnd, needle=glyph;
                ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2347:29: style: The scope of the variable 'strawEnd' can be reduced. [variableScope]
            int strawStart, strawEnd, needle=glyph;
                            ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2396:51: style: The scope of the variable 'm' can be reduced. [variableScope]
            stbtt_int32 l=0, r=classRangeCount-1, m;
                                                  ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2397:17: style: The scope of the variable 'strawStart' can be reduced. [variableScope]
            int strawStart, strawEnd, needle=glyph;
                ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2397:29: style: The scope of the variable 'strawEnd' can be reduced. [variableScope]
            int strawStart, strawEnd, needle=glyph;
                            ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2467:47: style: The scope of the variable 'm' can be reduced. [variableScope]
                            stbtt_int32 l, r, m;
                                              ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2468:33: style: The scope of the variable 'straw' can be reduced. [variableScope]
                            int straw, needle;
                                ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:3241:10: style: The scope of the variable 'j' can be reduced. [variableScope]
   int i,j;
         ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:3262:19: style: The scope of the variable 'c' can be reduced. [variableScope]
      int c01,c12,c,m,i,j;
                  ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:3334:12: style: The scope of the variable 'j' can be reduced. [variableScope]
   int n,i,j,k,m;
           ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:4334:19: style: The scope of the variable 'hits' can be reduced. [variableScope]
            float hits[2][2];
                  ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:4725:20: style: The scope of the variable 'hd' can be reduced. [variableScope]
   stbtt_uint32 nm,hd;
                   ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2265:95: style:inconclusive: Function 'stbtt_GetGlyphShape' argument 3 names different: declaration 'vertices' definition 'pvertices'. [funcArgNamesDifferent]
STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)
                                                                                              ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:835:95: note: Function 'stbtt_GetGlyphShape' argument 3 names different: declaration 'vertices' definition 'pvertices'.
STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **vertices);
                                                                                              ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2265:95: note: Function 'stbtt_GetGlyphShape' argument 3 names different: declaration 'vertices' definition 'pvertices'.
STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)
                                                                                              ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2556:74: style:inconclusive: Function 'stbtt_GetGlyphKernAdvance' argument 2 names different: declaration 'glyph1' definition 'g1'. [funcArgNamesDifferent]
STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)
                                                                         ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:801:74: note: Function 'stbtt_GetGlyphKernAdvance' argument 2 names different: declaration 'glyph1' definition 'g1'.
STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2);
                                                                         ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2556:74: note: Function 'stbtt_GetGlyphKernAdvance' argument 2 names different: declaration 'glyph1' definition 'g1'.
STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)
                                                                         ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2556:82: style:inconclusive: Function 'stbtt_GetGlyphKernAdvance' argument 3 names different: declaration 'glyph2' definition 'g2'. [funcArgNamesDifferent]
STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)
                                                                                 ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:801:86: note: Function 'stbtt_GetGlyphKernAdvance' argument 3 names different: declaration 'glyph2' definition 'g2'.
STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2);
                                                                                     ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2556:82: note: Function 'stbtt_GetGlyphKernAdvance' argument 3 names different: declaration 'glyph2' definition 'g2'.
STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)
                                                                                 ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2607:77: style:inconclusive: Function 'stbtt_ScaleForPixelHeight' argument 2 names different: declaration 'pixels' definition 'height'. [funcArgNamesDifferent]
STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)
                                                                            ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:759:77: note: Function 'stbtt_ScaleForPixelHeight' argument 2 names different: declaration 'pixels' definition 'height'.
STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float pixels);
                                                                            ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2607:77: note: Function 'stbtt_ScaleForPixelHeight' argument 2 names different: declaration 'pixels' definition 'height'.
STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)
                                                                            ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2619:74: style:inconclusive: Function 'stbtt_FreeShape' argument 2 names different: declaration 'vertices' definition 'v'. [funcArgNamesDifferent]
STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)
                                                                         ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:846:74: note: Function 'stbtt_FreeShape' argument 2 names different: declaration 'vertices' definition 'v'.
STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *vertices);
                                                                         ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:2619:74: note: Function 'stbtt_FreeShape' argument 2 names different: declaration 'vertices' definition 'v'.
STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)
                                                                         ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:3797:83: style:inconclusive: Function 'stbtt_PackBegin' argument 3 names different: declaration 'width' definition 'pw'. [funcArgNamesDifferent]
STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)
                                                                                  ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:589:84: note: Function 'stbtt_PackBegin' argument 3 names different: declaration 'width' definition 'pw'.
STBTT_DEF int  stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int width, int height, int stride_in_bytes, int padding, void *alloc_context);
                                                                                   ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:3797:83: note: Function 'stbtt_PackBegin' argument 3 names different: declaration 'width' definition 'pw'.
STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)
                                                                                  ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:3797:91: style:inconclusive: Function 'stbtt_PackBegin' argument 4 names different: declaration 'height' definition 'ph'. [funcArgNamesDifferent]
STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)
                                                                                          ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:589:95: note: Function 'stbtt_PackBegin' argument 4 names different: declaration 'height' definition 'ph'.
STBTT_DEF int  stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int width, int height, int stride_in_bytes, int padding, void *alloc_context);
                                                                                              ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:3797:91: note: Function 'stbtt_PackBegin' argument 4 names different: declaration 'height' definition 'ph'.
STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)
                                                                                          ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:4021:208: style:inconclusive: Function 'stbtt_MakeGlyphBitmapSubpixelPrefilter' argument 10 names different: declaration 'oversample_x' definition 'prefilter_x'. [funcArgNamesDifferent]
STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int prefilter_x, int prefilter_y, float *sub_x, float *sub_y, int glyph)
                                                                                                                                                                                                               ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:901:208: note: Function 'stbtt_MakeGlyphBitmapSubpixelPrefilter' argument 10 names different: declaration 'oversample_x' definition 'prefilter_x'.
STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int oversample_x, int oversample_y, float *sub_x, float *sub_y, int glyph);
                                                                                                                                                                                                               ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:4021:208: note: Function 'stbtt_MakeGlyphBitmapSubpixelPrefilter' argument 10 names different: declaration 'oversample_x' definition 'prefilter_x'.
STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int prefilter_x, int prefilter_y, float *sub_x, float *sub_y, int glyph)
                                                                                                                                                                                                               ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:4021:225: style:inconclusive: Function 'stbtt_MakeGlyphBitmapSubpixelPrefilter' argument 11 names different: declaration 'oversample_y' definition 'prefilter_y'. [funcArgNamesDifferent]
STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int prefilter_x, int prefilter_y, float *sub_x, float *sub_y, int glyph)
                                                                                                                                                                                                                                ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:901:226: note: Function 'stbtt_MakeGlyphBitmapSubpixelPrefilter' argument 11 names different: declaration 'oversample_y' definition 'prefilter_y'.
STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int oversample_x, int oversample_y, float *sub_x, float *sub_y, int glyph);
                                                                                                                                                                                                                                 ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:4021:225: note: Function 'stbtt_MakeGlyphBitmapSubpixelPrefilter' argument 11 names different: declaration 'oversample_y' definition 'prefilter_y'.
STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int prefilter_x, int prefilter_y, float *sub_x, float *sub_y, int glyph)
                                                                                                                                                                                                                                ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:4169:17: style:inconclusive: Function 'stbtt_PackFontRange' argument 5 names different: declaration 'first_unicode_char_in_range' definition 'first_unicode_codepoint_in_range'. [funcArgNamesDifferent]
            int first_unicode_codepoint_in_range, int num_chars_in_range, stbtt_packedchar *chardata_for_range)
                ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:606:37: note: Function 'stbtt_PackFontRange' argument 5 names different: declaration 'first_unicode_char_in_range' definition 'first_unicode_codepoint_in_range'.
                                int first_unicode_char_in_range, int num_chars_in_range, stbtt_packedchar *chardata_for_range);
                                    ^
../password-manager-master/source/ui/imgui/imstb_truetype.h:4169:17: note: Function 'stbtt_PackFontRange' argument 5 names different: declaration 'first_unicode_char_in_range' definition 'first_unicode_codepoint_in_range'.
            int first_unicode_codepoint_in_range, int num_chars_in_range, stbtt_packedchar *chardata_for_range)
                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:583:38: style:inconclusive: Function 'PushClipRect' argument 1 names different: declaration 'clip_rect_min' definition 'cr_min'. [funcArgNamesDifferent]
void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rect)
                                     ^
../password-manager-master/source/ui/imgui/imgui.h:2420:41: note: Function 'PushClipRect' argument 1 names different: declaration 'clip_rect_min' definition 'cr_min'.
    IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
                                        ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:583:38: note: Function 'PushClipRect' argument 1 names different: declaration 'clip_rect_min' definition 'cr_min'.
void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rect)
                                     ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:583:53: style:inconclusive: Function 'PushClipRect' argument 2 names different: declaration 'clip_rect_max' definition 'cr_max'. [funcArgNamesDifferent]
void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rect)
                                                    ^
../password-manager-master/source/ui/imgui/imgui.h:2420:63: note: Function 'PushClipRect' argument 2 names different: declaration 'clip_rect_max' definition 'cr_max'.
    IMGUI_API void  PushClipRect(ImVec2 clip_rect_min, ImVec2 clip_rect_max, bool intersect_with_current_clip_rect = false);  // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
                                                              ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:583:53: note: Function 'PushClipRect' argument 2 names different: declaration 'clip_rect_max' definition 'cr_max'.
void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rect)
                                                    ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:668:58: style:inconclusive: Function 'PrimRect' argument 2 names different: declaration 'b' definition 'c'. [funcArgNamesDifferent]
void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)
                                                         ^
../password-manager-master/source/ui/imgui/imgui.h:2493:61: note: Function 'PrimRect' argument 2 names different: declaration 'b' definition 'c'.
    IMGUI_API void  PrimRect(const ImVec2& a, const ImVec2& b, ImU32 col);      // Axis aligned rectangle (composed of two triangles)
                                                            ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:668:58: note: Function 'PrimRect' argument 2 names different: declaration 'b' definition 'c'.
void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)
                                                         ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:683:60: style:inconclusive: Function 'PrimRectUV' argument 2 names different: declaration 'b' definition 'c'. [funcArgNamesDifferent]
void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& uv_c, ImU32 col)
                                                           ^
../password-manager-master/source/ui/imgui/imgui.h:2494:63: note: Function 'PrimRectUV' argument 2 names different: declaration 'b' definition 'c'.
    IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);
                                                              ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:683:60: note: Function 'PrimRectUV' argument 2 names different: declaration 'b' definition 'c'.
void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& uv_c, ImU32 col)
                                                           ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:683:97: style:inconclusive: Function 'PrimRectUV' argument 4 names different: declaration 'uv_b' definition 'uv_c'. [funcArgNamesDifferent]
void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& uv_c, ImU32 col)
                                                                                                ^
../password-manager-master/source/ui/imgui/imgui.h:2494:100: note: Function 'PrimRectUV' argument 4 names different: declaration 'uv_b' definition 'uv_c'.
    IMGUI_API void  PrimRectUV(const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, ImU32 col);
                                                                                                   ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:683:97: note: Function 'PrimRectUV' argument 4 names different: declaration 'uv_b' definition 'uv_c'.
void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& uv_c, ImU32 col)
                                                                                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:721:62: style:inconclusive: Function 'AddPolyline' argument 2 names different: declaration 'num_points' definition 'points_count'. [funcArgNamesDifferent]
void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, ImDrawFlags flags, float thickness)
                                                             ^
../password-manager-master/source/ui/imgui/imgui.h:2448:59: note: Function 'AddPolyline' argument 2 names different: declaration 'num_points' definition 'points_count'.
    IMGUI_API void  AddPolyline(const ImVec2* points, int num_points, ImU32 col, ImDrawFlags flags, float thickness);
                                                          ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:721:62: note: Function 'AddPolyline' argument 2 names different: declaration 'num_points' definition 'points_count'.
void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, ImDrawFlags flags, float thickness)
                                                             ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:977:70: style:inconclusive: Function 'AddConvexPolyFilled' argument 2 names different: declaration 'num_points' definition 'points_count'. [funcArgNamesDifferent]
void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)
                                                                     ^
../password-manager-master/source/ui/imgui/imgui.h:2449:67: note: Function 'AddConvexPolyFilled' argument 2 names different: declaration 'num_points' definition 'points_count'.
    IMGUI_API void  AddConvexPolyFilled(const ImVec2* points, int num_points, ImU32 col); // Note: Anti-aliased filling requires points to be in clockwise order.
                                                                  ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:977:70: note: Function 'AddConvexPolyFilled' argument 2 names different: declaration 'num_points' definition 'points_count'.
void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)
                                                                     ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1356:41: style:inconclusive: Function 'PathRect' argument 1 names different: declaration 'rect_min' definition 'a'. [funcArgNamesDifferent]
void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)
                                        ^
../password-manager-master/source/ui/imgui/imgui.h:2471:44: note: Function 'PathRect' argument 1 names different: declaration 'rect_min' definition 'a'.
    IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, ImDrawFlags flags = 0);
                                           ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1356:41: note: Function 'PathRect' argument 1 names different: declaration 'rect_min' definition 'a'.
void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)
                                        ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1356:58: style:inconclusive: Function 'PathRect' argument 2 names different: declaration 'rect_max' definition 'b'. [funcArgNamesDifferent]
void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)
                                                         ^
../password-manager-master/source/ui/imgui/imgui.h:2471:68: note: Function 'PathRect' argument 2 names different: declaration 'rect_max' definition 'b'.
    IMGUI_API void  PathRect(const ImVec2& rect_min, const ImVec2& rect_max, float rounding = 0.0f, ImDrawFlags flags = 0);
                                                                   ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1356:58: note: Function 'PathRect' argument 2 names different: declaration 'rect_max' definition 'b'.
void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)
                                                         ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1689:59: style:inconclusive: Function 'Split' argument 2 names different: declaration 'count' definition 'channels_count'. [funcArgNamesDifferent]
void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)
                                                          ^
../password-manager-master/source/ui/imgui/imgui.h:2350:66: note: Function 'Split' argument 2 names different: declaration 'count' definition 'channels_count'.
    IMGUI_API void              Split(ImDrawList* draw_list, int count);
                                                                 ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1689:59: note: Function 'Split' argument 2 names different: declaration 'count' definition 'channels_count'.
void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)
                                                          ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1790:71: style:inconclusive: Function 'SetCurrentChannel' argument 2 names different: declaration 'channel_idx' definition 'idx'. [funcArgNamesDifferent]
void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)
                                                                      ^
../password-manager-master/source/ui/imgui/imgui.h:2352:78: note: Function 'SetCurrentChannel' argument 2 names different: declaration 'channel_idx' definition 'idx'.
    IMGUI_API void              SetCurrentChannel(ImDrawList* draw_list, int channel_idx);
                                                                             ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1790:71: note: Function 'SetCurrentChannel' argument 2 names different: declaration 'channel_idx' definition 'idx'.
void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)
                                                                      ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2123:57: style:inconclusive: Function 'AddFontDefault' argument 1 names different: declaration 'font_cfg' definition 'font_cfg_template'. [funcArgNamesDifferent]
ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)
                                                        ^
../password-manager-master/source/ui/imgui/imgui.h:2642:68: note: Function 'AddFontDefault' argument 1 names different: declaration 'font_cfg' definition 'font_cfg_template'.
    IMGUI_API ImFont*           AddFontDefault(const ImFontConfig* font_cfg = NULL);
                                                                   ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2123:57: note: Function 'AddFontDefault' argument 1 names different: declaration 'font_cfg' definition 'font_cfg_template'.
ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)
                                                        ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2144:102: style:inconclusive: Function 'AddFontFromFileTTF' argument 3 names different: declaration 'font_cfg' definition 'font_cfg_template'. [funcArgNamesDifferent]
ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui.h:2643:113: note: Function 'AddFontFromFileTTF' argument 3 names different: declaration 'font_cfg' definition 'font_cfg_template'.
    IMGUI_API ImFont*           AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);
                                                                                                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2144:102: note: Function 'AddFontFromFileTTF' argument 3 names different: declaration 'font_cfg' definition 'font_cfg_template'.
ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2166:49: style:inconclusive: Function 'AddFontFromMemoryTTF' argument 1 names different: declaration 'font_data' definition 'ttf_data'. [funcArgNamesDifferent]
ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                ^
../password-manager-master/source/ui/imgui/imgui.h:2644:60: note: Function 'AddFontFromMemoryTTF' argument 1 names different: declaration 'font_data' definition 'ttf_data'.
    IMGUI_API ImFont*           AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.
                                                           ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2166:49: note: Function 'AddFontFromMemoryTTF' argument 1 names different: declaration 'font_data' definition 'ttf_data'.
ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2166:63: style:inconclusive: Function 'AddFontFromMemoryTTF' argument 2 names different: declaration 'font_size' definition 'ttf_size'. [funcArgNamesDifferent]
ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                              ^
../password-manager-master/source/ui/imgui/imgui.h:2644:75: note: Function 'AddFontFromMemoryTTF' argument 2 names different: declaration 'font_size' definition 'ttf_size'.
    IMGUI_API ImFont*           AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.
                                                                          ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2166:63: note: Function 'AddFontFromMemoryTTF' argument 2 names different: declaration 'font_size' definition 'ttf_size'.
ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                              ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2166:112: style:inconclusive: Function 'AddFontFromMemoryTTF' argument 4 names different: declaration 'font_cfg' definition 'font_cfg_template'. [funcArgNamesDifferent]
ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                                                               ^
../password-manager-master/source/ui/imgui/imgui.h:2644:125: note: Function 'AddFontFromMemoryTTF' argument 4 names different: declaration 'font_cfg' definition 'font_cfg_template'.
    IMGUI_API ImFont*           AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after destruction of the atlas. Set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed.
                                                                                                                            ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2166:112: note: Function 'AddFontFromMemoryTTF' argument 4 names different: declaration 'font_cfg' definition 'font_cfg_template'.
ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                                                               ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2179:65: style:inconclusive: Function 'AddFontFromMemoryCompressedTTF' argument 1 names different: declaration 'compressed_font_data' definition 'compressed_ttf_data'. [funcArgNamesDifferent]
ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                ^
../password-manager-master/source/ui/imgui/imgui.h:2645:76: note: Function 'AddFontFromMemoryCompressedTTF' argument 1 names different: declaration 'compressed_font_data' definition 'compressed_ttf_data'.
    IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
                                                                           ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2179:65: note: Function 'AddFontFromMemoryCompressedTTF' argument 1 names different: declaration 'compressed_font_data' definition 'compressed_ttf_data'.
ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2179:90: style:inconclusive: Function 'AddFontFromMemoryCompressedTTF' argument 2 names different: declaration 'compressed_font_size' definition 'compressed_ttf_size'. [funcArgNamesDifferent]
ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                                         ^
../password-manager-master/source/ui/imgui/imgui.h:2645:102: note: Function 'AddFontFromMemoryCompressedTTF' argument 2 names different: declaration 'compressed_font_size' definition 'compressed_ttf_size'.
    IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2179:90: note: Function 'AddFontFromMemoryCompressedTTF' argument 2 names different: declaration 'compressed_font_size' definition 'compressed_ttf_size'.
ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                                         ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2179:150: style:inconclusive: Function 'AddFontFromMemoryCompressedTTF' argument 4 names different: declaration 'font_cfg' definition 'font_cfg_template'. [funcArgNamesDifferent]
ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui.h:2645:163: note: Function 'AddFontFromMemoryCompressedTTF' argument 4 names different: declaration 'font_cfg' definition 'font_cfg_template'.
    IMGUI_API ImFont*           AddFontFromMemoryCompressedTTF(const void* compressed_font_data, int compressed_font_size, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL); // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.
                                                                                                                                                                  ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2179:150: note: Function 'AddFontFromMemoryCompressedTTF' argument 4 names different: declaration 'font_cfg' definition 'font_cfg_template'.
ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges)
                                                                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2191:71: style:inconclusive: Function 'AddFontFromMemoryCompressedBase85TTF' argument 1 names different: declaration 'compressed_font_data_base85' definition 'compressed_ttf_data_base85'. [funcArgNamesDifferent]
ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges)
                                                                      ^
../password-manager-master/source/ui/imgui/imgui.h:2646:82: note: Function 'AddFontFromMemoryCompressedBase85TTF' argument 1 names different: declaration 'compressed_font_data_base85' definition 'compressed_ttf_data_base85'.
    IMGUI_API ImFont*           AddFontFromMemoryCompressedBase85TTF(const char* compressed_font_data_base85, float size_pixels, const ImFontConfig* font_cfg = NULL, const ImWchar* glyph_ranges = NULL);              // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.
                                                                                 ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2191:71: note: Function 'AddFontFromMemoryCompressedBase85TTF' argument 1 names different: declaration 'compressed_font_data_base85' definition 'compressed_ttf_data_base85'.
ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges)
                                                                      ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2239:58: style:inconclusive: Function 'GetMouseCursorTexData' argument 1 names different: declaration 'cursor' definition 'cursor_type'. [funcArgNamesDifferent]
bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])
                                                         ^
../password-manager-master/source/ui/imgui/imgui.h:2696:72: note: Function 'GetMouseCursorTexData' argument 1 names different: declaration 'cursor' definition 'cursor_type'.
    IMGUI_API bool              GetMouseCursorTexData(ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2]);
                                                                       ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2239:58: note: Function 'GetMouseCursorTexData' argument 1 names different: declaration 'cursor' definition 'cursor_type'.
bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])
                                                         ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2289:85: style:inconclusive: Function 'ImFontAtlasBuildMultiplyCalcLookupTable' argument 2 names different: declaration 'in_multiply_factor' definition 'in_brighten_factor'. [funcArgNamesDifferent]
void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_factor)
                                                                                    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2825:97: note: Function 'ImFontAtlasBuildMultiplyCalcLookupTable' argument 2 names different: declaration 'in_multiply_factor' definition 'in_brighten_factor'.
IMGUI_API void      ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_multiply_factor);
                                                                                                ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2289:85: note: Function 'ImFontAtlasBuildMultiplyCalcLookupTable' argument 2 names different: declaration 'in_multiply_factor' definition 'in_brighten_factor'.
void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_factor)
                                                                                    ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3253:43: style:inconclusive: Function 'AddGlyph' argument 1 names different: declaration 'src_cfg' definition 'cfg'. [funcArgNamesDifferent]
void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
                                          ^
../password-manager-master/source/ui/imgui/imgui.h:2784:62: note: Function 'AddGlyph' argument 1 names different: declaration 'src_cfg' definition 'cfg'.
    IMGUI_API void              AddGlyph(const ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
                                                             ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3253:43: note: Function 'AddGlyph' argument 1 names different: declaration 'src_cfg' definition 'cfg'.
void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
                                          ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3253:56: style:inconclusive: Function 'AddGlyph' argument 2 names different: declaration 'c' definition 'codepoint'. [funcArgNamesDifferent]
void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
                                                       ^
../password-manager-master/source/ui/imgui/imgui.h:2784:79: note: Function 'AddGlyph' argument 2 names different: declaration 'c' definition 'codepoint'.
    IMGUI_API void              AddGlyph(const ImFontConfig* src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);
                                                                              ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3253:56: note: Function 'AddGlyph' argument 2 names different: declaration 'c' definition 'codepoint'.
void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
                                                       ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3923:107: style:inconclusive: Function 'RenderColorRectWithAlphaCheckerboard' argument 4 names different: declaration 'fill_col' definition 'col'. [funcArgNamesDifferent]
void ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_max, ImU32 col, float grid_step, ImVec2 grid_off, float rounding, ImDrawFlags flags)
                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2694:123: note: Function 'RenderColorRectWithAlphaCheckerboard' argument 4 names different: declaration 'fill_col' definition 'col'.
    IMGUI_API void          RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, float grid_step, ImVec2 grid_off, float rounding = 0.0f, ImDrawFlags flags = 0);
                                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3923:107: note: Function 'RenderColorRectWithAlphaCheckerboard' argument 4 names different: declaration 'fill_col' definition 'col'.
void ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_max, ImU32 col, float grid_step, ImVec2 grid_off, float rounding, ImDrawFlags flags)
                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:4047:80: style:inconclusive: Function 'stb_decompress' argument 2 names different: declaration 'input' definition 'i'. [funcArgNamesDifferent]
static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int /*length*/)
                                                                               ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2108:80: note: Function 'stb_decompress' argument 2 names different: declaration 'input' definition 'i'.
static unsigned int stb_decompress(unsigned char* output, const unsigned char* input, unsigned int length);
                                                                               ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:4047:80: note: Function 'stb_decompress' argument 2 names different: declaration 'input' definition 'i'.
static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int /*length*/)
                                                                               ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2379:13: style: Argument 'src_tmp.DstIndex!=-1' to function assert is always 0 [constArgument]
            IM_ASSERT(src_tmp.DstIndex != -1); // cfg.DstFont not pointing within atlas->Fonts[] array?
            ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2377:30: note: Assuming that condition 'src_tmp.DstIndex==-1' is not redundant
        if (src_tmp.DstIndex == -1)
                             ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2379:13: note: Argument 'src_tmp.DstIndex!=-1' to function assert is always 0
            IM_ASSERT(src_tmp.DstIndex != -1); // cfg.DstFont not pointing within atlas->Fonts[] array?
            ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1144:16: style: Variable 'out_ptr' is assigned a value that is never used. [unreadVariable]
        out_ptr++;
               ^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:162:0: error: No header in #include [preprocessorErrorDirective]
#include IMGUI_STB_TRUETYPE_FILENAME
^
../password-manager-master/source/ui/imgui/imgui_stdlib.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
../password-manager-master/source/ui/imgui/imgui_stdlib.cpp:19:45: style: C-style pointer casting [cstyleCast]
    InputTextCallback_UserData* user_data = (InputTextCallback_UserData*)data->UserData;
                                            ^
../password-manager-master/source/ui/imgui/imgui.h:2319:0: information: Skipping configuration 'IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT' since the value of 'IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
IMGUI_OVERRIDE_DRAWVERT_STRUCT_LAYOUT;
^
../password-manager-master/source/ui/imgui/imgui.h:46:0: error: No header in #include [preprocessorErrorDirective]
#include IMGUI_USER_CONFIG
^
../password-manager-master/source/ui/imgui/imgui.h:2589:134: style: Argument 'size_in_bytes/(int)sizeof(unsigned int)' to function resize is always 34816 [constArgument]
    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }
                                                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui.h:2589:98: note: Assignment 'size_in_bytes=(1114111+1)/8', assigned value is 139264
    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }
                                                                                                 ^
../password-manager-master/source/ui/imgui/imgui.h:2589:134: note: Argument 'size_in_bytes/(int)sizeof(unsigned int)' to function resize is always 34816
    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1) / 8; UsedChars.resize(size_in_bytes / (int)sizeof(ImU32)); memset(UsedChars.Data, 0, (size_t)size_in_bytes); }
                                                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui.h:267:0: information: Skipping configuration 'IM_VEC2_CLASS_EXTRA' since the value of 'IM_VEC2_CLASS_EXTRA' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    IM_VEC2_CLASS_EXTRA     // Define additional constructors and implicit cast operators in imconfig.h to convert back and forth between your math types and ImVec2.
^
../password-manager-master/source/ui/imgui/imgui.h:278:0: information: Skipping configuration 'IM_VEC4_CLASS_EXTRA' since the value of 'IM_VEC4_CLASS_EXTRA' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    IM_VEC4_CLASS_EXTRA     // Define additional constructors and implicit cast operators in imconfig.h to convert back and forth between your math types and ImVec4.
^
../password-manager-master/source/ui/imgui/imgui.h:262:5: error: syntax error [syntaxError]
    ImVec2()                                { x = y = 0.0f; }
    ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 40 configurations. Use --force to check all configurations. [toomanyconfigs]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1320:5: warning: Assert statement calls a function which may have desired side effects: 'back'. [assertWithSideEffect]
    IM_ASSERT_USER_ERROR(inner_window->IDStack.back() == table->ID + table->InstanceCurrent, "Mismatching PushID/PopID!");
    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:670:62: warning: Assert statement calls a function which may have desired side effects: 'begin'. [assertWithSideEffect]
    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()); p = (T*)(void*)((char*)(void*)p + chunk_size(p)); if (p == (T*)(void*)((char*)end() + HDR_SZ)) return (T*)0; IM_ASSERT(p < end()); return p; }
                                                             ^
../password-manager-master/source/ui/imgui/imgui_internal.h:670:62: warning: Assert statement calls a function which may have desired side effects: 'end'. [assertWithSideEffect]
    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()); p = (T*)(void*)((char*)(void*)p + chunk_size(p)); if (p == (T*)(void*)((char*)end() + HDR_SZ)) return (T*)0; IM_ASSERT(p < end()); return p; }
                                                             ^
../password-manager-master/source/ui/imgui/imgui_internal.h:673:43: warning: Assert statement calls a function which may have desired side effects: 'begin'. [assertWithSideEffect]
    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t off = (const char*)p - Buf.Data; return (int)off; }
                                          ^
../password-manager-master/source/ui/imgui/imgui_internal.h:673:43: warning: Assert statement calls a function which may have desired side effects: 'end'. [assertWithSideEffect]
    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t off = (const char*)p - Buf.Data; return (int)off; }
                                          ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3380:67: warning: Assignment of function parameter has no effect outside the function. Did you forget dereferencing it? [uselessAssignmentPtrArg]
        if (sscanf(line, "Sort=%d%c%n", &n, &c, &r) == 2)       { line = ImStrSkipBlank(line + r); column->SortOrder = (ImGuiTableColumnIdx)n; column->SortDirection = (c == '^') ? ImGuiSortDirection_Descending : ImGuiSortDirection_Ascending; settings->SaveFlags |= ImGuiTableFlags_Sortable; }
                                                                  ^
../password-manager-master/source/ui/imgui/imgui_internal.h:671:13: performance:inconclusive: Technically the member function 'ImChunkStream < ImGuiWindowSettings >::chunk_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }
            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:671:13: performance:inconclusive: Technically the member function 'ImChunkStream < ImGuiTableSettings >::chunk_size' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }
            ^
../password-manager-master/source/ui/imgui/imgui_internal.h:611:18: style:inconclusive: Technically the member function 'ImSpanAllocator < 3 >::GetArenaSizeInBytes' can be const. [functionConst]
    inline int   GetArenaSizeInBytes()              { return CurrOff; }
                 ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3361:36: style: C-style pointer casting [cstyleCast]
    ImGuiTableSettings* settings = (ImGuiTableSettings*)entry;
                                   ^
../password-manager-master/source/ui/imgui/imgui_internal.h:668:197: style: C-style pointer casting [cstyleCast]
    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = IM_MEMALIGN(HDR_SZ + sz, 4u); int off = Buf.Size; Buf.resize(off + (int)sz); ((int*)(void*)(Buf.Data + off))[0] = (int)sz; return (T*)(void*)(Buf.Data + off + (int)HDR_SZ); }
                                                                                                                                                                                                    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:669:97: style: C-style pointer casting [cstyleCast]
    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return (T*)(void*)(Buf.Data + HDR_SZ); }
                                                                                                ^
../password-manager-master/source/ui/imgui/imgui_internal.h:670:104: style: C-style pointer casting [cstyleCast]
    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()); p = (T*)(void*)((char*)(void*)p + chunk_size(p)); if (p == (T*)(void*)((char*)end() + HDR_SZ)) return (T*)0; IM_ASSERT(p < end()); return p; }
                                                                                                       ^
../password-manager-master/source/ui/imgui/imgui_internal.h:672:50: style: C-style pointer casting [cstyleCast]
    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }
                                                 ^
../password-manager-master/source/ui/imgui/imgui_internal.h:674:89: style: C-style pointer casting [cstyleCast]
    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 && off < Buf.Size); return (T*)(void*)(Buf.Data + off); }
                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:2324:19: style: The scope of the variable 'g' can be reduced. [variableScope]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3205:19: style: The scope of the variable 'g' can be reduced. [variableScope]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3255:19: style: The scope of the variable 'g' can be reduced. [variableScope]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3955:19: style: The scope of the variable 'g' can be reduced. [variableScope]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:304:51: style:inconclusive: Function 'BeginTable' argument 2 names different: declaration 'column' definition 'columns_count'. [funcArgNamesDifferent]
bool    ImGui::BeginTable(const char* str_id, int columns_count, ImGuiTableFlags flags, const ImVec2& outer_size, float inner_width)
                                                  ^
../password-manager-master/source/ui/imgui/imgui.h:738:64: note: Function 'BeginTable' argument 2 names different: declaration 'column' definition 'columns_count'.
    IMGUI_API bool          BeginTable(const char* str_id, int column, ImGuiTableFlags flags = 0, const ImVec2& outer_size = ImVec2(0.0f, 0.0f), float inner_width = 0.0f);
                                                               ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:304:51: note: Function 'BeginTable' argument 2 names different: declaration 'column' definition 'columns_count'.
bool    ImGui::BeginTable(const char* str_id, int columns_count, ImGuiTableFlags flags, const ImVec2& outer_size, float inner_width)
                                                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1465:40: style:inconclusive: Function 'TableSetupScrollFreeze' argument 1 names different: declaration 'cols' definition 'columns'. [funcArgNamesDifferent]
void ImGui::TableSetupScrollFreeze(int columns, int rows)
                                       ^
../password-manager-master/source/ui/imgui/imgui.h:753:56: note: Function 'TableSetupScrollFreeze' argument 1 names different: declaration 'cols' definition 'columns'.
    IMGUI_API void          TableSetupScrollFreeze(int cols, int rows); // lock columns/rows so they stay visible when scrolled.
                                                       ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1465:40: note: Function 'TableSetupScrollFreeze' argument 1 names different: declaration 'cols' definition 'columns'.
void ImGui::TableSetupScrollFreeze(int columns, int rows)
                                       ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1541:54: style:inconclusive: Function 'TableSetColumnEnabled' argument 2 names different: declaration 'v' definition 'enabled'. [funcArgNamesDifferent]
void ImGui::TableSetColumnEnabled(int column_n, bool enabled)
                                                     ^
../password-manager-master/source/ui/imgui/imgui.h:772:78: note: Function 'TableSetColumnEnabled' argument 2 names different: declaration 'v' definition 'enabled'.
    IMGUI_API void                  TableSetColumnEnabled(int column_n, bool v);// change user accessible enabled/disabled state of a column. Set to false to hide the column. User can use the context menu to change this themselves (right-click in headers, or right-click in columns body with ImGuiTableFlags_ContextMenuInBody)
                                                                             ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1541:54: note: Function 'TableSetColumnEnabled' argument 2 names different: declaration 'v' definition 'enabled'.
void ImGui::TableSetColumnEnabled(int column_n, bool enabled)
                                                     ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1667:62: style:inconclusive: Function 'TableNextRow' argument 2 names different: declaration 'min_row_height' definition 'row_min_height'. [funcArgNamesDifferent]
void ImGui::TableNextRow(ImGuiTableRowFlags row_flags, float row_min_height)
                                                             ^
../password-manager-master/source/ui/imgui/imgui.h:740:82: note: Function 'TableNextRow' argument 2 names different: declaration 'min_row_height' definition 'row_min_height'.
    IMGUI_API void          TableNextRow(ImGuiTableRowFlags row_flags = 0, float min_row_height = 0.0f); // append into the first cell of a new row.
                                                                                 ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1667:62: note: Function 'TableNextRow' argument 2 names different: declaration 'min_row_height' definition 'row_min_height'.
void ImGui::TableNextRow(ImGuiTableRowFlags row_flags, float row_min_height)
                                                             ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3475:64: style:inconclusive: Function 'TableGcCompactTransientBuffers' argument 1 names different: declaration 'table' definition 'temp_data'. [funcArgNamesDifferent]
void ImGui::TableGcCompactTransientBuffers(ImGuiTableTempData* temp_data)
                                                               ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2659:80: note: Function 'TableGcCompactTransientBuffers' argument 1 names different: declaration 'table' definition 'temp_data'.
    IMGUI_API void          TableGcCompactTransientBuffers(ImGuiTableTempData* table);
                                                                               ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3475:64: note: Function 'TableGcCompactTransientBuffers' argument 1 names different: declaration 'table' definition 'temp_data'.
void ImGui::TableGcCompactTransientBuffers(ImGuiTableTempData* temp_data)
                                                               ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3725:53: style:inconclusive: Function 'SetColumnOffset' argument 2 names different: declaration 'offset_x' definition 'offset'. [funcArgNamesDifferent]
void ImGui::SetColumnOffset(int column_index, float offset)
                                                    ^
../password-manager-master/source/ui/imgui/imgui.h:783:69: note: Function 'SetColumnOffset' argument 2 names different: declaration 'offset_x' definition 'offset'.
    IMGUI_API void          SetColumnOffset(int column_index, float offset_x);                  // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column
                                                                    ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3725:53: note: Function 'SetColumnOffset' argument 2 names different: declaration 'offset_x' definition 'offset'.
void ImGui::SetColumnOffset(int column_index, float offset)
                                                    ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3808:53: style:inconclusive: Function 'GetColumnsID' argument 2 names different: declaration 'count' definition 'columns_count'. [funcArgNamesDifferent]
ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)
                                                    ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2615:66: note: Function 'GetColumnsID' argument 2 names different: declaration 'count' definition 'columns_count'.
    IMGUI_API ImGuiID       GetColumnsID(const char* str_id, int count);
                                                                 ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3808:53: note: Function 'GetColumnsID' argument 2 names different: declaration 'count' definition 'columns_count'.
ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)
                                                    ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3821:50: style:inconclusive: Function 'BeginColumns' argument 2 names different: declaration 'count' definition 'columns_count'. [funcArgNamesDifferent]
void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiOldColumnFlags flags)
                                                 ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2610:66: note: Function 'BeginColumns' argument 2 names different: declaration 'count' definition 'columns_count'.
    IMGUI_API void          BeginColumns(const char* str_id, int count, ImGuiOldColumnFlags flags = 0); // setup number of columns. use an identifier to distinguish multiple column sets. close with EndColumns().
                                                                 ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3821:50: note: Function 'BeginColumns' argument 2 names different: declaration 'count' definition 'columns_count'.
void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiOldColumnFlags flags)
                                                 ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:4029:25: style:inconclusive: Function 'Columns' argument 1 names different: declaration 'count' definition 'columns_count'. [funcArgNamesDifferent]
void ImGui::Columns(int columns_count, const char* id, bool border)
                        ^
../password-manager-master/source/ui/imgui/imgui.h:777:41: note: Function 'Columns' argument 1 names different: declaration 'count' definition 'columns_count'.
    IMGUI_API void          Columns(int count = 1, const char* id = NULL, bool border = true);
                                        ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:4029:25: note: Function 'Columns' argument 1 names different: declaration 'count' definition 'columns_count'.
void ImGui::Columns(int columns_count, const char* id, bool border)
                        ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1137:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1399:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1467:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1509:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1516:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1543:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1559:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1598:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1607:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1659:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1669:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1727:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1871:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1881:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1902:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:2070:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:2216:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:2228:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:2601:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:2652:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:2814:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:2856:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3003:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3024:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3670:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3714:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3823:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3904:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:370:37: style: Variable 'override_content_size' is assigned a value that is never used. [unreadVariable]
        ImVec2 override_content_size(FLT_MAX, FLT_MAX);
                                    ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations. [toomanyconfigs]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:4054:78: warning: Comparison of a boolean expression with an integer. [compareBoolExpressionWithInt]
    const bool init_changed_specs = (state != NULL && state->Stb.single_line != !is_multiline);
                                                                             ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7199:28: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    ImGuiTabBarSection() { memset(this, 0, sizeof(*this)); }
                           ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7215:5: portability: Using memset() on struct which contains a floating point number. [memsetClassFloat]
    memset(this, 0, sizeof(*this));
    ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1504:38: style: C-style pointer casting [cstyleCast]
    const ImGuiShrinkWidthItem* a = (const ImGuiShrinkWidthItem*)lhs;
                                     ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1505:38: style: C-style pointer casting [cstyleCast]
    const ImGuiShrinkWidthItem* b = (const ImGuiShrinkWidthItem*)rhs;
                                     ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6606:43: style: C-style pointer casting [cstyleCast]
    ImGuiPlotArrayGetterData* plot_data = (ImGuiPlotArrayGetterData*)data;
                                          ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6810:36: style: C-style pointer casting [cstyleCast]
        ImGuiViewportP* viewport = (ImGuiViewportP*)(void*)(viewport_p ? viewport_p : GetMainViewport());
                                   ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6840:32: style: C-style pointer casting [cstyleCast]
    ImGuiViewportP* viewport = (ImGuiViewportP*)(void*)GetMainViewport();
                               ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7227:30: style: C-style pointer casting [cstyleCast]
    const ImGuiTabItem* a = (const ImGuiTabItem*)lhs;
                             ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7228:30: style: C-style pointer casting [cstyleCast]
    const ImGuiTabItem* b = (const ImGuiTabItem*)rhs;
                             ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7238:30: style: C-style pointer casting [cstyleCast]
    const ImGuiTabItem* a = (const ImGuiTabItem*)lhs;
                             ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7239:30: style: C-style pointer casting [cstyleCast]
    const ImGuiTabItem* b = (const ImGuiTabItem*)rhs;
                             ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7246:22: style: C-style pointer casting [cstyleCast]
    return ref.Ptr ? (ImGuiTabBar*)ref.Ptr : g.TabBars.GetByIndex(ref.Index);
                     ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6607:50: portability:inconclusive: Casting from const float * to const unsigned char * is not portable due to different binary data representations on different platforms. [invalidPointerCast]
    const float v = *(const float*)(const void*)((const unsigned char*)plot_data->Values + (size_t)idx * plot_data->Stride);
                                                 ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6012:18: style: The expression 'selected != was_selected' is always false because 'selected' and 'was_selected' represent the same value. [knownConditionTrueFalse]
    if (selected != was_selected) //-V547
                 ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:5967:31: note: 'was_selected' is assigned value 'selected' here.
    const bool was_selected = selected;
                              ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6012:18: note: The expression 'selected != was_selected' is always false because 'selected' and 'was_selected' represent the same value.
    if (selected != was_selected) //-V547
                 ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:155:19: style: The scope of the variable 'g' can be reduced. [variableScope]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1338:19: style: The scope of the variable 'g' can be reduced. [variableScope]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3390:19: style: The scope of the variable 'g' can be reduced. [variableScope]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3434:17: style: The scope of the variable 'style' can be reduced. [variableScope]
    ImGuiStyle& style = g.Style;
                ^
../password-manager-master/source/ui/imgui/imstb_textedit.h:402:22: style: The scope of the variable 'prev_x' can be reduced. [variableScope]
   float base_y = 0, prev_x;
                     ^
../password-manager-master/source/ui/imgui/imstb_textedit.h:403:13: style: The scope of the variable 'k' can be reduced. [variableScope]
   int i=0, k;
            ^
../password-manager-master/source/ui/imgui/imstb_textedit.h:1351:8: style: The scope of the variable 'i' can be reduced. [variableScope]
   int i;
       ^
../password-manager-master/source/ui/imgui/imstb_textedit.h:1361:8: style: The scope of the variable 'i' can be reduced. [variableScope]
   int i;
       ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:5971:10: style: The scope of the variable 'toggled' can be reduced. [variableScope]
    bool toggled = false;
         ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2992:9: style: Checking if unsigned expression '*(const unsigned long long*)p_max' is less than zero. [unsignedLessThanZero]
        IM_ASSERT(*(const ImU64*)p_max <= IM_U64_MAX / 2);
        ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:732:63: style:inconclusive: Function 'InvisibleButton' argument 2 names different: declaration 'size' definition 'size_arg'. [funcArgNamesDifferent]
bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)
                                                              ^
../password-manager-master/source/ui/imgui/imgui.h:504:79: note: Function 'InvisibleButton' argument 2 names different: declaration 'size' definition 'size_arg'.
    IMGUI_API bool          InvisibleButton(const char* str_id, const ImVec2& size, ImGuiButtonFlags flags = 0); // flexible button behavior without the visuals, frequently useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)
                                                                              ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:732:63: note: Function 'InvisibleButton' argument 2 names different: declaration 'size' definition 'size_arg'.
bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)
                                                              ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:754:68: style:inconclusive: Function 'ArrowButtonEx' argument 3 names different: declaration 'size_arg' definition 'size'. [funcArgNamesDifferent]
bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)
                                                                   ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2718:84: note: Function 'ArrowButtonEx' argument 3 names different: declaration 'size_arg' definition 'size'.
    IMGUI_API bool          ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size_arg, ImGuiButtonFlags flags = 0);
                                                                                   ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:754:68: note: Function 'ArrowButtonEx' argument 3 names different: declaration 'size_arg' definition 'size'.
bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)
                                                                   ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:910:39: style:inconclusive: Function 'ScrollbarEx' argument 1 names different: declaration 'bb' definition 'bb_frame'. [funcArgNamesDifferent]
bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, ImS64 size_avail_v, ImS64 size_contents_v, ImDrawFlags flags)
                                      ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2720:55: note: Function 'ScrollbarEx' argument 1 names different: declaration 'bb' definition 'bb_frame'.
    IMGUI_API bool          ScrollbarEx(const ImRect& bb, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, ImS64 avail_v, ImS64 contents_v, ImDrawFlags flags);
                                                      ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:910:39: note: Function 'ScrollbarEx' argument 1 names different: declaration 'bb' definition 'bb_frame'.
bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, ImS64 size_avail_v, ImS64 size_contents_v, ImDrawFlags flags)
                                      ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:910:102: style:inconclusive: Function 'ScrollbarEx' argument 5 names different: declaration 'avail_v' definition 'size_avail_v'. [funcArgNamesDifferent]
bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, ImS64 size_avail_v, ImS64 size_contents_v, ImDrawFlags flags)
                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2720:112: note: Function 'ScrollbarEx' argument 5 names different: declaration 'avail_v' definition 'size_avail_v'.
    IMGUI_API bool          ScrollbarEx(const ImRect& bb, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, ImS64 avail_v, ImS64 contents_v, ImDrawFlags flags);
                                                                                                               ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:910:102: note: Function 'ScrollbarEx' argument 5 names different: declaration 'avail_v' definition 'size_avail_v'.
bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, ImS64 size_avail_v, ImS64 size_contents_v, ImDrawFlags flags)
                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:910:122: style:inconclusive: Function 'ScrollbarEx' argument 6 names different: declaration 'contents_v' definition 'size_contents_v'. [funcArgNamesDifferent]
bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, ImS64 size_avail_v, ImS64 size_contents_v, ImDrawFlags flags)
                                                                                                                         ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2720:127: note: Function 'ScrollbarEx' argument 6 names different: declaration 'contents_v' definition 'size_contents_v'.
    IMGUI_API bool          ScrollbarEx(const ImRect& bb, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, ImS64 avail_v, ImS64 contents_v, ImDrawFlags flags);
                                                                                                                              ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:910:122: note: Function 'ScrollbarEx' argument 6 names different: declaration 'contents_v' definition 'size_contents_v'.
bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, ImS64 size_avail_v, ImS64 size_contents_v, ImDrawFlags flags)
                                                                                                                         ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1837:105: style:inconclusive: Function 'Combo' argument 5 names different: declaration 'popup_max_height_in_items' definition 'height_in_items'. [funcArgNamesDifferent]
bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items)
                                                                                                        ^
../password-manager-master/source/ui/imgui/imgui.h:521:121: note: Function 'Combo' argument 5 names different: declaration 'popup_max_height_in_items' definition 'height_in_items'.
    IMGUI_API bool          Combo(const char* label, int* current_item, const char* const items[], int items_count, int popup_max_height_in_items = -1);
                                                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1837:105: note: Function 'Combo' argument 5 names different: declaration 'popup_max_height_in_items' definition 'height_in_items'.
bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items)
                                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1844:99: style:inconclusive: Function 'Combo' argument 4 names different: declaration 'popup_max_height_in_items' definition 'height_in_items'. [funcArgNamesDifferent]
bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)
                                                                                                  ^
../password-manager-master/source/ui/imgui/imgui.h:522:115: note: Function 'Combo' argument 4 names different: declaration 'popup_max_height_in_items' definition 'height_in_items'.
    IMGUI_API bool          Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int popup_max_height_in_items = -1);      // Separate items with \0 within a string, end item-list with \0\0. e.g. "One\0Two\0Three\0"
                                                                                                                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1844:99: note: Function 'Combo' argument 4 names different: declaration 'popup_max_height_in_items' definition 'height_in_items'.
bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)
                                                                                                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1943:88: style:inconclusive: Function 'DataTypeApplyOp' argument 4 names different: declaration 'arg_1' definition 'arg1'. [funcArgNamesDifferent]
void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, const void* arg2)
                                                                                       ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2752:104: note: Function 'DataTypeApplyOp' argument 4 names different: declaration 'arg_1' definition 'arg1'.
    IMGUI_API void          DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg_1, const void* arg_2);
                                                                                                       ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1943:88: note: Function 'DataTypeApplyOp' argument 4 names different: declaration 'arg_1' definition 'arg1'.
void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, const void* arg2)
                                                                                       ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1943:106: style:inconclusive: Function 'DataTypeApplyOp' argument 5 names different: declaration 'arg_2' definition 'arg2'. [funcArgNamesDifferent]
void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, const void* arg2)
                                                                                                         ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2752:123: note: Function 'DataTypeApplyOp' argument 5 names different: declaration 'arg_2' definition 'arg2'.
    IMGUI_API void          DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg_1, const void* arg_2);
                                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1943:106: note: Function 'DataTypeApplyOp' argument 5 names different: declaration 'arg_2' definition 'arg2'.
void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, const void* arg2)
                                                                                                         ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3089:77: style:inconclusive: Function 'SliderScalarN' argument 3 names different: declaration 'p_data' definition 'v'. [funcArgNamesDifferent]
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, ImGuiSliderFlags flags)
                                                                            ^
../password-manager-master/source/ui/imgui/imgui.h:565:93: note: Function 'SliderScalarN' argument 3 names different: declaration 'p_data' definition 'v'.
    IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
                                                                                            ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3089:77: note: Function 'SliderScalarN' argument 3 names different: declaration 'p_data' definition 'v'.
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, ImGuiSliderFlags flags)
                                                                            ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3089:108: style:inconclusive: Function 'SliderScalarN' argument 5 names different: declaration 'p_min' definition 'v_min'. [funcArgNamesDifferent]
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, ImGuiSliderFlags flags)
                                                                                                           ^
../password-manager-master/source/ui/imgui/imgui.h:565:129: note: Function 'SliderScalarN' argument 5 names different: declaration 'p_min' definition 'v_min'.
    IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
                                                                                                                                ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3089:108: note: Function 'SliderScalarN' argument 5 names different: declaration 'p_min' definition 'v_min'.
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, ImGuiSliderFlags flags)
                                                                                                           ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3089:127: style:inconclusive: Function 'SliderScalarN' argument 6 names different: declaration 'p_max' definition 'v_max'. [funcArgNamesDifferent]
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, ImGuiSliderFlags flags)
                                                                                                                              ^
../password-manager-master/source/ui/imgui/imgui.h:565:148: note: Function 'SliderScalarN' argument 6 names different: declaration 'p_max' definition 'v_max'.
    IMGUI_API bool          SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format = NULL, ImGuiSliderFlags flags = 0);
                                                                                                                                                   ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3089:127: note: Function 'SliderScalarN' argument 6 names different: declaration 'p_max' definition 'v_max'.
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, ImGuiSliderFlags flags)
                                                                                                                              ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3257:77: style:inconclusive: Function 'SliderScalarN' argument 3 names different: declaration 'p_data' definition 'v'. [funcArgNamesDifferent]
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)
                                                                            ^
../password-manager-master/source/ui/imgui/imgui.h:2854:89: note: Function 'SliderScalarN' argument 3 names different: declaration 'p_data' definition 'v'.
    IMGUI_API bool      SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, float power);
                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3257:77: note: Function 'SliderScalarN' argument 3 names different: declaration 'p_data' definition 'v'.
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)
                                                                            ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3257:108: style:inconclusive: Function 'SliderScalarN' argument 5 names different: declaration 'p_min' definition 'v_min'. [funcArgNamesDifferent]
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)
                                                                                                           ^
../password-manager-master/source/ui/imgui/imgui.h:2854:125: note: Function 'SliderScalarN' argument 5 names different: declaration 'p_min' definition 'v_min'.
    IMGUI_API bool      SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, float power);
                                                                                                                            ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3257:108: note: Function 'SliderScalarN' argument 5 names different: declaration 'p_min' definition 'v_min'.
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)
                                                                                                           ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3257:127: style:inconclusive: Function 'SliderScalarN' argument 6 names different: declaration 'p_max' definition 'v_max'. [funcArgNamesDifferent]
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)
                                                                                                                              ^
../password-manager-master/source/ui/imgui/imgui.h:2854:144: note: Function 'SliderScalarN' argument 6 names different: declaration 'p_max' definition 'v_max'.
    IMGUI_API bool      SliderScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components, const void* p_min, const void* p_max, const char* format, float power);
                                                                                                                                               ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3257:127: note: Function 'SliderScalarN' argument 6 names different: declaration 'p_max' definition 'v_max'.
bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, const void* v_min, const void* v_max, const char* format, float power)
                                                                                                                              ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3292:48: style:inconclusive: Function 'ImParseFormatFindStart' argument 1 names different: declaration 'format' definition 'fmt'. [funcArgNamesDifferent]
const char* ImParseFormatFindStart(const char* fmt)
                                               ^
../password-manager-master/source/ui/imgui/imgui_internal.h:332:60: note: Function 'ImParseFormatFindStart' argument 1 names different: declaration 'format' definition 'fmt'.
IMGUI_API const char*   ImParseFormatFindStart(const char* format);
                                                           ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3292:48: note: Function 'ImParseFormatFindStart' argument 1 names different: declaration 'format' definition 'fmt'.
const char* ImParseFormatFindStart(const char* fmt)
                                               ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3305:46: style:inconclusive: Function 'ImParseFormatFindEnd' argument 1 names different: declaration 'format' definition 'fmt'. [funcArgNamesDifferent]
const char* ImParseFormatFindEnd(const char* fmt)
                                             ^
../password-manager-master/source/ui/imgui/imgui_internal.h:333:58: note: Function 'ImParseFormatFindEnd' argument 1 names different: declaration 'format' definition 'fmt'.
IMGUI_API const char*   ImParseFormatFindEnd(const char* format);
                                                         ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3305:46: note: Function 'ImParseFormatFindEnd' argument 1 names different: declaration 'format' definition 'fmt'.
const char* ImParseFormatFindEnd(const char* fmt)
                                             ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3327:54: style:inconclusive: Function 'ImParseFormatTrimDecorations' argument 1 names different: declaration 'format' definition 'fmt'. [funcArgNamesDifferent]
const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)
                                                     ^
../password-manager-master/source/ui/imgui/imgui_internal.h:334:66: note: Function 'ImParseFormatTrimDecorations' argument 1 names different: declaration 'format' definition 'fmt'.
IMGUI_API const char*   ImParseFormatTrimDecorations(const char* format, char* buf, size_t buf_size);
                                                                 ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3327:54: note: Function 'ImParseFormatTrimDecorations' argument 1 names different: declaration 'format' definition 'fmt'.
const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)
                                                     ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3341:40: style:inconclusive: Function 'ImParseFormatPrecision' argument 1 names different: declaration 'format' definition 'fmt'. [funcArgNamesDifferent]
int ImParseFormatPrecision(const char* fmt, int default_precision)
                                       ^
../password-manager-master/source/ui/imgui/imgui_internal.h:335:60: note: Function 'ImParseFormatPrecision' argument 1 names different: declaration 'format' definition 'fmt'.
IMGUI_API int           ImParseFormatPrecision(const char* format, int default_value);
                                                           ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3341:40: note: Function 'ImParseFormatPrecision' argument 1 names different: declaration 'format' definition 'fmt'.
int ImParseFormatPrecision(const char* fmt, int default_precision)
                                       ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3341:49: style:inconclusive: Function 'ImParseFormatPrecision' argument 2 names different: declaration 'default_value' definition 'default_precision'. [funcArgNamesDifferent]
int ImParseFormatPrecision(const char* fmt, int default_precision)
                                                ^
../password-manager-master/source/ui/imgui/imgui_internal.h:335:72: note: Function 'ImParseFormatPrecision' argument 2 names different: declaration 'default_value' definition 'default_precision'.
IMGUI_API int           ImParseFormatPrecision(const char* format, int default_value);
                                                                       ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3341:49: note: Function 'ImParseFormatPrecision' argument 2 names different: declaration 'default_value' definition 'default_precision'.
int ImParseFormatPrecision(const char* fmt, int default_precision)
                                                ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3828:67: style:inconclusive: Function 'InsertChars' argument 2 names different: declaration 'text' definition 'new_text'. [funcArgNamesDifferent]
void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)
                                                                  ^
../password-manager-master/source/ui/imgui/imgui.h:1992:58: note: Function 'InsertChars' argument 2 names different: declaration 'text' definition 'new_text'.
    IMGUI_API void      InsertChars(int pos, const char* text, const char* text_end = NULL);
                                                         ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3828:67: note: Function 'InsertChars' argument 2 names different: declaration 'text' definition 'new_text'.
void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)
                                                                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3828:89: style:inconclusive: Function 'InsertChars' argument 3 names different: declaration 'text_end' definition 'new_text_end'. [funcArgNamesDifferent]
void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)
                                                                                        ^
../password-manager-master/source/ui/imgui/imgui.h:1992:76: note: Function 'InsertChars' argument 3 names different: declaration 'text_end' definition 'new_text_end'.
    IMGUI_API void      InsertChars(int pos, const char* text, const char* text_end = NULL);
                                                                           ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3828:89: note: Function 'InsertChars' argument 3 names different: declaration 'text_end' definition 'new_text_end'.
void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)
                                                                                        ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3957:177: style:inconclusive: Function 'InputTextEx' argument 8 names different: declaration 'user_data' definition 'callback_user_data'. [funcArgNamesDifferent]
bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* callback_user_data)
                                                                                                                                                                                ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2758:200: note: Function 'InputTextEx' argument 8 names different: declaration 'user_data' definition 'callback_user_data'.
    IMGUI_API bool          InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback = NULL, void* user_data = NULL);
                                                                                                                                                                                                       ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3957:177: note: Function 'InputTextEx' argument 8 names different: declaration 'user_data' definition 'callback_user_data'.
bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void* callback_user_data)
                                                                                                                                                                                ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6413:107: style:inconclusive: Function 'ListBox' argument 5 names different: declaration 'height_in_items' definition 'height_items'. [funcArgNamesDifferent]
bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_items)
                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui.h:632:123: note: Function 'ListBox' argument 5 names different: declaration 'height_in_items' definition 'height_items'.
    IMGUI_API bool          ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_in_items = -1);
                                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6413:107: note: Function 'ListBox' argument 5 names different: declaration 'height_in_items' definition 'height_items'.
bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_count, int height_items)
                                                                                                          ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6802:67: style:inconclusive: Function 'BeginViewportSideBar' argument 2 names different: declaration 'viewport' definition 'viewport_p'. [funcArgNamesDifferent]
bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, float axis_size, ImGuiWindowFlags window_flags)
                                                                  ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2557:83: note: Function 'BeginViewportSideBar' argument 2 names different: declaration 'viewport' definition 'viewport_p'.
    IMGUI_API bool          BeginViewportSideBar(const char* name, ImGuiViewport* viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags);
                                                                                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6802:67: note: Function 'BeginViewportSideBar' argument 2 names different: declaration 'viewport' definition 'viewport_p'.
bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, float axis_size, ImGuiWindowFlags window_flags)
                                                                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6802:99: style:inconclusive: Function 'BeginViewportSideBar' argument 4 names different: declaration 'size' definition 'axis_size'. [funcArgNamesDifferent]
bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, float axis_size, ImGuiWindowFlags window_flags)
                                                                                                  ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2557:113: note: Function 'BeginViewportSideBar' argument 4 names different: declaration 'size' definition 'axis_size'.
    IMGUI_API bool          BeginViewportSideBar(const char* name, ImGuiViewport* viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags);
                                                                                                                ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6802:99: note: Function 'BeginViewportSideBar' argument 4 names different: declaration 'size' definition 'axis_size'.
bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, float axis_size, ImGuiWindowFlags window_flags)
                                                                                                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7271:66: style:inconclusive: Function 'BeginTabBarEx' argument 2 names different: declaration 'bb' definition 'tab_bar_bb'. [funcArgNamesDifferent]
bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags flags)
                                                                 ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2672:79: note: Function 'BeginTabBarEx' argument 2 names different: declaration 'bb' definition 'tab_bar_bb'.
    IMGUI_API bool          BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& bb, ImGuiTabBarFlags flags);
                                                                              ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7271:66: note: Function 'BeginTabBarEx' argument 2 names different: declaration 'bb' definition 'tab_bar_bb'.
bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags flags)
                                                                 ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7712:86: style:inconclusive: Function 'TabBarQueueReorderFromMousePos' argument 2 names different: declaration 'tab' definition 'src_tab'. [funcArgNamesDifferent]
void ImGui::TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, const ImGuiTabItem* src_tab, ImVec2 mouse_pos)
                                                                                     ^
../password-manager-master/source/ui/imgui/imgui_internal.h:2677:102: note: Function 'TabBarQueueReorderFromMousePos' argument 2 names different: declaration 'tab' definition 'src_tab'.
    IMGUI_API void          TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, const ImGuiTabItem* tab, ImVec2 mouse_pos);
                                                                                                     ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7712:86: note: Function 'TabBarQueueReorderFromMousePos' argument 2 names different: declaration 'tab' definition 'src_tab'.
void ImGui::TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, const ImGuiTabItem* src_tab, ImVec2 mouse_pos)
                                                                                     ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:8164:45: style:inconclusive: Function 'SetTabItemClosed' argument 1 names different: declaration 'tab_or_docked_window_label' definition 'label'. [funcArgNamesDifferent]
void    ImGui::SetTabItemClosed(const char* label)
                                            ^
../password-manager-master/source/ui/imgui/imgui.h:792:58: note: Function 'SetTabItemClosed' argument 1 names different: declaration 'tab_or_docked_window_label' definition 'label'.
    IMGUI_API void          SetTabItemClosed(const char* tab_or_docked_window_label);           // notify TabBar or Docking system of a closed tab/window ahead (useful to reduce visual flicker on reorderable tab bars). For tab-bar: call after BeginTabBar() and before Tab submissions. Otherwise call with a window name.
                                                         ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:8164:45: note: Function 'SetTabItemClosed' argument 1 names different: declaration 'tab_or_docked_window_label' definition 'label'.
void    ImGui::SetTabItemClosed(const char* label)
                                            ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:155:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:329:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:676:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:760:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:875:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1058:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1078:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1184:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1247:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1431:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1565:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1794:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2357:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2482:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2538:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2592:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2972:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3095:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3390:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3507:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3627:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:4857:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:5140:14: style: Variable 'io' can be declared with const [constVariable]
    ImGuiIO& io = g.IO;
             ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:5607:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:5834:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6079:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6088:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6111:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6393:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6404:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6423:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6480:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6864:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7075:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7617:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7678:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7714:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7842:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7893:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7917:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7936:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7956:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:8166:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:8179:19: style: Variable 'g' can be declared with const [constVariable]
    ImGuiContext& g = *GImGui;
                  ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:366:26: style: Variable 'value_bb' is assigned a value that is never used. [unreadVariable]
    const ImRect value_bb(pos, pos + ImVec2(w, value_size.y + style.FramePadding.y * 2));
                         ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1101:26: style: Variable 'check_bb' is assigned a value that is never used. [unreadVariable]
    const ImRect check_bb(pos, pos + ImVec2(square_sz, square_sz));
                         ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:4590:21: style: Variable 'text_size' is assigned a value that is never used. [unreadVariable]
    ImVec2 text_size(0.0f, 0.0f);
                    ^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2992:9: style: Checking if unsigned expression '*(const uint64_t*)p_max' is less than zero. [unsignedLessThanZero]
        IM_ASSERT(*(const ImU64*)p_max <= IM_U64_MAX / 2);
        ^
../password-manager-master/source/ui/ui_update.cpp:40:17: style: The scope of the variable 'aes_key_changed' can be reduced. [variableScope]
    static bool aes_key_changed = false;
                ^
../password-manager-master/source/ui/wasm/wasm_impl.cpp:71:12: error: Syntax Error: AST broken, 'if' doesn't have two operands. [internalAstError]
        if (e.keyCode === 8 || e.keyCode === 13)
           ^
../password-manager-master/source/ui/imgui/imgui.cpp:7290:0: style: The function 'ActivateItem' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1566:0: style: The function 'AddBezierQuadratic' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:474:0: style: The function 'AddCallback' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:3515:0: style: The function 'AddContextHook' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2212:0: style: The function 'AddCustomRectFontGlyph' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2144:0: style: The function 'AddFontFromFileTTF' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1626:0: style: The function 'AddImageQuad' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1642:0: style: The function 'AddImageRounded' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1150:0: style: The function 'AddInputCharacterUTF16' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1531:0: style: The function 'AddNgon' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1543:0: style: The function 'AddNgonFilled' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1436:0: style: The function 'AddQuad' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1448:0: style: The function 'AddQuadFilled' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3080:0: style: The function 'AddRanges' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3297:0: style: The function 'AddRemapChar' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:784:0: style: The function 'ArrowButton' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1712:0: style: The function 'BeginComboPreview' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:10628:0: style: The function 'BeginDragDropTargetCustom' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6837:0: style: The function 'BeginMainMenuBar' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7065:0: style: The function 'BeginMenu' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8848:0: style: The function 'BeginPopupContextItem' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8876:0: style: The function 'BeginPopupContextVoid' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:6668:0: style: The function 'BringWindowToDisplayBack' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3087:0: style: The function 'BuildRanges' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1949:0: style: The function 'BuildSortByKey' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2257:0: style: The function 'CalcListClipping' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:4986:0: style: The function 'CaptureKeyboardFromApp' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:4991:0: style: The function 'CaptureMouseFromApp' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1195:0: style: The function 'ClearInputCharacters' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:441:0: style: The function 'CloneOutput' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8655:0: style: The function 'ClosePopupsExceptModals' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6128:0: style: The function 'CollapsingHeader' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:4842:0: style: The function 'ColorEdit3' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:5108:0: style: The function 'ColorPicker3' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1819:0: style: The function 'DeIndexAllBuffers' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7466:0: style: The function 'DebugCheckVersionAndDataLayout' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3810:0: style: The function 'DeleteChars' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2516:0: style: The function 'DragFloat2' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2521:0: style: The function 'DragFloat3' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2526:0: style: The function 'DragFloat4' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2532:0: style: The function 'DragFloatRange2' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2570:0: style: The function 'DragInt2' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2575:0: style: The function 'DragInt3' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2580:0: style: The function 'DragInt4' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:2586:0: style: The function 'DragIntRange2' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2087:0: style: The function 'Draw' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1738:0: style: The function 'EndComboPreview' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6858:0: style: The function 'EndMainMenuBar' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7070:0: style: The function 'EndMenu' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7556:0: style: The function 'ErrorCheckEndFrameRecover' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2419:0: style: The function 'ForceDisplayRangeByIndices' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:3488:0: style: The function 'GetAllocatorFunctions' is never used. [unusedFunction]

^
../password-manager-master/source/ui/android/android_impl.cpp:255:0: style: The function 'GetAssetData' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1972:0: style: The function 'GetBool' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2002:0: style: The function 'GetBoolRef' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3642:0: style: The function 'GetColumnIndex' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3712:0: style: The function 'GetColumnWidth' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3648:0: style: The function 'GetColumnsCount' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8039:0: style: The function 'GetContentRegionMax' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7866:0: style: The function 'GetCursorPos' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7878:0: style: The function 'GetCursorPosY' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7905:0: style: The function 'GetCursorStartPos' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:10725:0: style: The function 'GetDragDropPayload' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:3614:0: style: The function 'GetDrawListSharedData' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1977:0: style: The function 'GetFloat' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2007:0: style: The function 'GetFloatRef' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7266:0: style: The function 'GetFont' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8030:0: style: The function 'GetFrameHeightWithSpacing' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2833:0: style: The function 'GetGlyphRangesChineseFull' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2863:0: style: The function 'GetGlyphRangesChineseSimplifiedCommon' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2931:0: style: The function 'GetGlyphRangesJapanese' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:2820:0: style: The function 'GetGlyphRangesKorean' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3034:0: style: The function 'GetGlyphRangesThai' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3046:0: style: The function 'GetGlyphRangesVietnamese' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:3228:0: style: The function 'GetHoveredID' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5129:0: style: The function 'GetItemRectSize' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:4890:0: style: The function 'GetMouseClickedCount' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:4955:0: style: The function 'GetMouseDragDelta' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:4924:0: style: The function 'GetMousePosOnOpeningCurrentPopup' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8316:0: style: The function 'GetScrollMaxX' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8304:0: style: The function 'GetScrollX' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8310:0: style: The function 'GetScrollY' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7358:0: style: The function 'GetStateStorage' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2015:0: style: The function 'GetVoidPtrRef' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7047:0: style: The function 'GetWindowPos' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5541:0: style: The function 'GetWindowResizeBorderID' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5531:0: style: The function 'GetWindowResizeCornerID' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7086:0: style: The function 'GetWindowSize' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1222:0: style: The function 'ImBezierCubicClosestPoint' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1280:0: style: The function 'ImBezierCubicClosestPointCasteljau' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:268:0: style: The function 'ImGui_ImplSDL2_InitForD3D' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:276:0: style: The function 'ImGui_ImplSDL2_InitForMetal' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:281:0: style: The function 'ImGui_ImplSDL2_InitForSDLRenderer' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/backends/imgui_impl_sdl.cpp:260:0: style: The function 'ImGui_ImplSDL2_InitForVulkan' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1343:0: style: The function 'ImStricmp' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1393:0: style: The function 'ImStrlenW' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:1350:0: style: The function 'ImStrnicmp' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1056:0: style: The function 'ImageButton' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3579:0: style: The function 'InputDouble' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3536:0: style: The function 'InputFloat' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3542:0: style: The function 'InputFloat2' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3547:0: style: The function 'InputFloat3' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3552:0: style: The function 'InputFloat4' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3557:0: style: The function 'InputInt' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3564:0: style: The function 'InputInt2' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3569:0: style: The function 'InputInt3' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3574:0: style: The function 'InputInt4' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3828:0: style: The function 'InsertChars' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5067:0: style: The function 'IsAnyItemFocused' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:4943:0: style: The function 'IsAnyMouseDown' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:10682:0: style: The function 'IsDragDropPayloadBeingAccepted' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5004:0: style: The function 'IsItemActivated' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5038:0: style: The function 'IsItemClicked' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5021:0: style: The function 'IsItemDeactivatedAfterEdit' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5079:0: style: The function 'IsItemEdited' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5043:0: style: The function 'IsItemToggledOpen' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5049:0: style: The function 'IsItemToggledSelection' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:4843:0: style: The function 'IsKeyReleased' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7164:0: style: The function 'IsWindowAppearing' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7158:0: style: The function 'IsWindowCollapsed' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:341:0: style: The function 'LabelText' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6390:0: style: The function 'ListBoxHeader' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:10959:0: style: The function 'LogButtons' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:10915:0: style: The function 'LogToBuffer' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1332:0: style: The function 'NewLine' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3898:0: style: The function 'NextColumn' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2136:0: style: The function 'PassFilter' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6622:0: style: The function 'PlotHistogram' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6611:0: style: The function 'PlotLines' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:6891:0: style: The function 'PopButtonRepeat' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:657:0: style: The function 'PrimUnreserve' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1241:0: style: The function 'ProgressBar' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:6886:0: style: The function 'PushButtonRepeat' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:602:0: style: The function 'PushClipRectFullScreen' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7297:0: style: The function 'PushFocusScope' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:3525:0: style: The function 'RemoveContextHook' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:3903:0: style: The function 'RenderRectFilledWithHole' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:4968:0: style: The function 'ResetMouseDragDelta' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:1840:0: style: The function 'ScaleClipRects' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8226:0: style: The function 'ScrollToItem' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2062:0: style: The function 'SetAllInt' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:3480:0: style: The function 'SetAllocatorFunctions' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2035:0: style: The function 'SetBool' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:5586:0: style: The function 'SetColorEditOptions' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3747:0: style: The function 'SetColumnWidth' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7898:0: style: The function 'SetCursorPosY' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:2040:0: style: The function 'SetFloat' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:5097:0: style: The function 'SetItemUsingMouseWheel' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7238:0: style: The function 'SetNextWindowCollapsed' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7247:0: style: The function 'SetNextWindowFocus' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8395:0: style: The function 'SetScrollHereX' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:8408:0: style: The function 'SetScrollHereY' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7352:0: style: The function 'SetStateStorage' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:8164:0: style: The function 'SetTabItemClosed' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7176:0: style: The function 'SetWindowFocus' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7281:0: style: The function 'SetWindowFontScale' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:7146:0: style: The function 'SetWindowHitTestHole' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui.cpp:11593:0: style: The function 'ShowMetricsWindow' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3144:0: style: The function 'SliderAngle' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3129:0: style: The function 'SliderFloat2' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3134:0: style: The function 'SliderFloat3' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3139:0: style: The function 'SliderFloat4' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3159:0: style: The function 'SliderInt2' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3164:0: style: The function 'SliderInt3' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3169:0: style: The function 'SliderInt4' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:1443:0: style: The function 'SplitterBehavior' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:250:0: style: The function 'StyleColorsClassic' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_draw.cpp:311:0: style: The function 'StyleColorsLight' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7631:0: style: The function 'TabBarRemoveTab' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:7934:0: style: The function 'TabItemButton' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:297:0: style: The function 'TableFindByID' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1869:0: style: The function 'TableGetColumnIndex' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1657:0: style: The function 'TableGetRowIndex' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:2599:0: style: The function 'TableGetSortSpecs' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:3448:0: style: The function 'TableRemove' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1541:0: style: The function 'TableSetColumnEnabled' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_tables.cpp:1465:0: style: The function 'TableSetupScrollFreeze' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:5769:0: style: The function 'TreeNodeV' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:6061:0: style: The function 'TreePush' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3233:0: style: The function 'VSliderFloat' is never used. [unusedFunction]

^
../password-manager-master/source/ui/imgui/imgui_widgets.cpp:3238:0: style: The function 'VSliderInt' is never used. [unusedFunction]

^
../password-manager-master/source/ui/android/android_impl.cpp:220:0: style: The function 'android_main' is never used. [unusedFunction]

^
../password-manager-master/source/ui/ui_update.cpp:31:0: style: The function 'write_clipboard' is never used. [unusedFunction]

^
../password-manager-master/source/ui/wasm/ui_xcrypt.cpp:26:0: style: The function 'write_encrypted_passwords' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

